
--- START OF FILE: app.py ---
# -*- coding: utf-8 -*-
# Standard Library Imports
import os
import logging
from sqlalchemy import text
from logging.handlers import RotatingFileHandler
from flask import Flask
from extensions import db  # Import db from extensions
from flask_migrate import Migrate
from flask_login import LoginManager
from flask_wtf.csrf import CSRFProtect



# --- App Configuration ---
app = Flask(__name__)
app.secret_key = os.environ.get('SECRET_KEY', 'dev-insecure-fallback-key')
db_url = os.environ.get('DATABASE_URL', 'sqlite:///inventory.db')
app.config['SQLALCHEMY_DATABASE_URI'] = db_url
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['SQLALCHEMY_ENGINE_OPTIONS'] = {
    'connect_args': {'check_same_thread': False}
}

# Initialize db
db.init_app(app)

csrf = CSRFProtect(app)

# Add this after db initialization
with app.app_context():
    # Enable foreign key constraints for SQLite
    if 'sqlite' in db_url:
        db.session.execute(text('PRAGMA foreign_keys = ON'))
        db.session.commit()  # Commit the pragma statement

# --- Other Extensions ---
migrate = Migrate(app, db)
login_manager = LoginManager(app)
login_manager.login_view = 'login'
login_manager.login_message_category = 'info'

# --- Logging Setup ---
log_formatter = logging.Formatter('%(asctime)s %(levelname)s: %(message)s [in %(pathname)s:%(lineno)d]')
log_handler = RotatingFileHandler('app.log', maxBytes=1024000, backupCount=10, encoding='utf-8')
log_handler.setFormatter(log_formatter)
log_level_str = os.environ.get('LOG_LEVEL', 'DEBUG').upper()
log_level = getattr(logging, log_level_str, logging.DEBUG)
log_handler.setLevel(log_level)
if not app.debug:
    app.logger.addHandler(log_handler)
app.logger.setLevel(log_level)
app.logger.info('Inventory App Starting Up...')
app.logger.info(f'Database URI: {db_url}')
if app.secret_key == 'dev-insecure-fallback-key':
    app.logger.warning('SECURITY WARNING: Using default SECRET_KEY. Set the SECRET_KEY environment variable for production!')

# --- Import Models and Routes ---
from models import *
from routes import *

# --- Jinja Filters ---
@app.template_filter('datetimeformat')
def datetimeformat(value, format='%Y-%m-%d %H:%M'):
    from datetime import date
    if value is None:
        return ''
    try:
        if isinstance(value, datetime):
            return value.strftime(format)
        elif isinstance(value, date):
            return value.strftime(format.split(' ')[0])
        else:
            try:
                if isinstance(value, str):
                    parsed_date = datetime.fromisoformat(value)
                    return parsed_date.strftime(format)
            except ValueError:
                pass
            return str(value)
    except Exception as e:
        app.logger.error(f"Error formatting date {value}: {str(e)}", exc_info=True)
        return str(value)

# --- CLI Commands ---
@app.cli.command("create-admin")
def create_admin():
    default_username = os.environ.get('ADMIN_USERNAME', 'admin')
    default_password = os.environ.get('ADMIN_PASSWORD', None)
    username = input(f"Enter admin username [{default_username}]: ").strip() or default_username
    if not username:
        print("Username cannot be empty.")
        return
    if User.query.filter_by(username=username).first():
        print(f"User '{username}' already exists.")
        return
    password = ""
    confirm_password = "-"
    while password != confirm_password:
        if default_password:
            use_env_pw = input("Use password from ADMIN_PASSWORD environment variable? (Y/n): ").strip().lower()
            if use_env_pw != 'n':
                password = default_password
                confirm_password = password
                print("Using password from environment variable.")
                break
        import getpass
        password = getpass.getpass("Enter admin password: ")
        if not password:
            print("Password cannot be empty.")
            password = ""
            confirm_password = "-"
            continue
        confirm_password = getpass.getpass("Confirm admin password: ")
        if password != confirm_password:
            print("Passwords do not match. Please try again.")
    admin_user = User(username=username, is_admin=True)
    admin_user.set_password(password)
    db.session.add(admin_user)
    try:
        db.session.commit()
        print(f"Admin user '{username}' created successfully.")
        app.logger.info(f"Admin user '{username}' created via CLI.")
    except Exception as e:
        db.session.rollback()
        print(f"Error creating admin user: {e}")
        app.logger.error(f"Error creating admin user '{username}' via CLI: {e}", exc_info=True)

# --- Error Handling ---
@app.errorhandler(404)
def page_not_found(e):
    app.logger.warning(f"404 Not Found: {request.url} ({e})")
    return render_template('404.html'), 404

@app.errorhandler(403)
def forbidden_access(e):
    app.logger.warning(f"403 Forbidden: {request.url} by user '{current_user.username}' ({e})")
    return render_template('403.html'), 403

@app.errorhandler(500)
def internal_server_error(e):
    app.logger.error(f"500 Internal Server Error: {request.url} ({e})", exc_info=True)
    try:
        db.session.rollback()
        app.logger.info("Rolled back database session after 500 error.")
    except Exception as rollback_e:
        app.logger.error(f"Error during rollback after 500 error: {rollback_e}", exc_info=True)
    return render_template('500.html'), 500

@app.errorhandler(405)
def method_not_allowed(e):
    app.logger.warning(f"405 Method Not Allowed: {request.url}")
    return render_template('405.html'), 405

@app.errorhandler(400)
def bad_request(e):
    if 'CSRF' in str(e):
        flash('Invalid CSRF token. Please try again.', 'danger')
        return redirect(request.url)
    return render_template('400.html'), 400

# --- Main Execution ---
if __name__ == '__main__':
    app_debug = os.environ.get('FLASK_DEBUG', 'False').lower() in ('true', '1', 't')
    port = int(os.environ.get('PORT', 5000))
    host = os.environ.get('HOST', '127.0.0.1')
    app.run(debug=app_debug, host=host, port=port)
--- END OF FILE: app.py ---

--- START OF FILE: extensions.py ---
# extensions.py
from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()
--- END OF FILE: extensions.py ---

--- START OF FILE: init_db.py ---
#!/usr/bin/env python3
"""
Script to initialize the database with the required tables.
"""

import os
import sys
from app import app, db
from models import User, Inventory, Location, ItemLocation, Movement, DisposedItem

def init_db():
    """Initialize the database with all required tables."""
    with app.app_context():
        # Create all tables
        db.create_all()
        print("Database tables created successfully!")
        
        # Check if we have any users, if not create a default admin user
        if User.query.count() == 0:
            admin_user = User(username='admin', is_admin=True)
            admin_user.set_password('KdBXg4QHz9qEdR5z')  # You should change this password
            db.session.add(admin_user)
            db.session.commit()
            print("Admin user created.")
        else:
            print("Database already has users, skipping default user creation.")

if __name__ == '__main__':
    init_db()
--- END OF FILE: init_db.py ---

--- START OF FILE: models.py ---
from flask_login import UserMixin
from werkzeug.security import generate_password_hash, check_password_hash
from extensions import db
from datetime import datetime, timezone

class Location(db.Model):
    """Represents different locations where inventory items are stored."""
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), unique=True, nullable=False, index=True)

    # Relationships
    items = db.relationship('ItemLocation', back_populates='location', lazy='dynamic')
    outgoing_movements = db.relationship('Movement', foreign_keys='Movement.from_location_id', back_populates='from_location', lazy='dynamic')
    incoming_movements = db.relationship('Movement', foreign_keys='Movement.to_location_id', back_populates='to_location', lazy='dynamic')
    disposals = db.relationship('DisposedItem', back_populates='location', lazy='dynamic')

    def __repr__(self):
        return f'<Location {self.name}>'

class Inventory(db.Model):
    """Represents inventory items with their details."""
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False, index=True)
    description = db.Column(db.String(200))
    category = db.Column(db.String(50), index=True)
    condition = db.Column(db.String(50))

    # Relationships
    locations = db.relationship('ItemLocation', back_populates='item', lazy='joined', cascade="all, delete-orphan")
    movements = db.relationship('Movement', back_populates='item', lazy='joined', cascade="all, delete-orphan")
    disposals = db.relationship('DisposedItem', back_populates='item', cascade="all, delete-orphan", lazy='joined')

    def __repr__(self):
        return f'<Inventory {self.name}>'

    @property
    def total_quantity(self):
        """Calculates the total quantity across all locations."""
        return db.session.query(db.func.sum(ItemLocation.quantity))\
                         .filter(ItemLocation.item_id == self.id)\
                         .scalar() or 0

class ItemLocation(db.Model):
    """Represents the association between inventory items and locations, including quantity."""
    id = db.Column(db.Integer, primary_key=True)
    item_id = db.Column(db.Integer, db.ForeignKey('inventory.id', ondelete='CASCADE'), nullable=False)
    location_id = db.Column(db.Integer, db.ForeignKey('location.id'), nullable=False)
    quantity = db.Column(db.Integer, default=0, nullable=False)

    # Relationships
    item = db.relationship('Inventory', back_populates='locations')
    location = db.relationship('Location', back_populates='items')

    # Constraints
    __table_args__ = (
        db.UniqueConstraint('item_id', 'location_id', name='_item_location_uc'),
        db.CheckConstraint('quantity >= 0', name='check_quantity_non_negative'),
    )

    def __repr__(self):
        return f'<ItemLocation Item:{self.item_id} Loc:{self.location_id} Qty:{self.quantity}>'

class Movement(db.Model):
    """Represents the movement of inventory items between locations."""
    id = db.Column(db.Integer, primary_key=True)
    item_id = db.Column(db.Integer, db.ForeignKey('inventory.id', ondelete='CASCADE'), nullable=False)
    quantity = db.Column(db.Integer, nullable=False)
    from_location_id = db.Column(db.Integer, db.ForeignKey('location.id'))
    to_location_id = db.Column(db.Integer, db.ForeignKey('location.id'))
    movement_date = db.Column(db.DateTime(timezone=True), nullable=False, default=lambda: datetime.now(timezone.utc))
    responsible_person = db.Column(db.String(100))
    notes = db.Column(db.Text)

    # Relationships
    item = db.relationship('Inventory', back_populates='movements')
    from_location = db.relationship('Location', foreign_keys=[from_location_id], back_populates='outgoing_movements')
    to_location = db.relationship('Location', foreign_keys=[to_location_id], back_populates='incoming_movements')

    # Constraints
    __table_args__ = (
        db.CheckConstraint('quantity > 0', name='check_movement_quantity_positive'),
        db.CheckConstraint('from_location_id IS NOT NULL OR to_location_id IS NOT NULL', name='check_location_presence'),
    )

    def __repr__(self):
        return f'<Movement {self.id}: {self.quantity} units of {self.item_id} on {self.movement_date}>'

class DisposedItem(db.Model):
    """Represents items that have been disposed of."""
    id = db.Column(db.Integer, primary_key=True)
    item_id = db.Column(db.Integer, db.ForeignKey('inventory.id', ondelete='CASCADE'), nullable=False)
    location_id = db.Column(db.Integer, db.ForeignKey('location.id'), nullable=False)
    quantity = db.Column(db.Integer, nullable=False)
    reason = db.Column(db.String(100), nullable=False)
    disposed_date = db.Column(db.Date, nullable=False)
    disposed_by = db.Column(db.String(100), nullable=False)
    notes = db.Column(db.String(200))

    # Relationships
    item = db.relationship('Inventory', back_populates='disposals')
    location = db.relationship('Location', back_populates='disposals')

    # Constraints
    __table_args__ = (
        db.CheckConstraint('quantity > 0', name='check_disposal_quantity_positive'),
    )

    def __repr__(self):
        return f'<DisposedItem Item:{self.item_id} Qty:{self.quantity} Date:{self.disposed_date}>'

class User(db.Model, UserMixin):
    """Represents users of the application with authentication details."""
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(100), unique=True, nullable=False, index=True)
    password_hash = db.Column(db.String(128), nullable=False)
    is_admin = db.Column(db.Boolean, default=False, nullable=False)

    def set_password(self, password):
        """Sets the password hash for the user."""
        self.password_hash = generate_password_hash(password)

    def check_password(self, password):
        """Checks if the provided password matches the stored hash."""
        return check_password_hash(self.password_hash, password)

    def __repr__(self):
        return f'<User {self.username}>'
--- END OF FILE: models.py ---

--- START OF FILE: routes.py ---
# -*- coding: utf-8 -*-
# Third-party Imports
from flask import (
    render_template, request, send_file, redirect, url_for, flash, abort,
    current_app
)
from flask_login import login_user, login_required, logout_user, current_user
from werkzeug.security import check_password_hash
from sqlalchemy import cast, String
from io import StringIO, BytesIO
import csv
import zipfile
from datetime import datetime, timezone

# Local Imports
from extensions import db
from models import User, Inventory, Location, ItemLocation, Movement, DisposedItem
from utils import (
    get_or_create_location, process_inventory_row, process_movement_row,
    process_disposed_item_row, generate_inventory_csv, generate_movements_csv,
    generate_disposals_csv, generate_inventory_template, generate_movements_template,
    generate_disposals_template
)
from app import app, login_manager

# ---------- AUTHENTICATION ROUTES ---------- #

@login_manager.user_loader
def load_user(user_id):
    """Loads user for Flask-Login."""
    return db.session.get(User, int(user_id))

@app.route('/login', methods=['GET', 'POST'])
def login():
    """Handles user login."""
    if current_user.is_authenticated:
        return redirect(url_for('index'))

    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')
        remember = 'remember' in request.form

        user = User.query.filter_by(username=username).first()

        if user and user.check_password(password):
            login_user(user, remember=remember)
            current_app.logger.info(f"User '{username}' logged in successfully.")
            next_page = request.args.get('next')
            if next_page and not next_page.startswith('/'):
                next_page = url_for('index')
            return redirect(next_page or url_for('index'))
        else:
            flash('Invalid username or password.', 'danger')
            current_app.logger.warning(f"Failed login attempt for username: '{username}'")

    return render_template('login.html')

@app.route('/logout')
@login_required
def logout():
    """Logs the current user out."""
    user_name = current_user.username
    logout_user()
    flash('You have been logged out.', 'success')
    current_app.logger.info(f"User '{user_name}' logged out.")
    return redirect(url_for('login'))

@app.route('/register', methods=['GET', 'POST'])
@login_required
def register():
    """Handles new user registration (Admin only)."""
    if not current_user.is_admin:
        current_app.logger.warning(f"Non-admin user '{current_user.username}' attempted access to /register.")
        abort(403)

    if request.method == 'POST':
        username = request.form.get('username').strip()
        password = request.form.get('password')
        confirm_password = request.form.get('confirm_password')
        is_admin = 'is_admin' in request.form

        if not username:
            flash('Username cannot be empty.', 'danger')
        elif not password:
            flash('Password cannot be empty.', 'danger')
        elif password != confirm_password:
            flash('Passwords do not match.', 'danger')
        elif User.query.filter_by(username=username).first():
            flash('Username already exists. Please choose another.', 'danger')
        else:
            new_user = User(username=username, is_admin=is_admin)
            new_user.set_password(password)
            db.session.add(new_user)
            try:
                db.session.commit()
                flash(f'User "{username}" created successfully.', 'success')
                current_app.logger.info(f"Admin '{current_user.username}' created user '{username}' (admin={is_admin}).")
                return redirect(url_for('index'))
            except Exception as e:
                db.session.rollback()
                flash(f'Error creating user: {str(e)}', 'danger')
                current_app.logger.error(f"DB error creating user '{username}': {e}", exc_info=True)

        return render_template('register.html', username=username, is_admin=is_admin)

    return render_template('register.html')

# ---------- INVENTORY ROUTES ---------- #

@app.route('/')
@login_required
def index():
    """Displays the main inventory list (items with stock > 0)."""
    inventory_items = Inventory.query.options(
        db.joinedload(Inventory.locations).joinedload(ItemLocation.location)
    ).filter(Inventory.locations.any(ItemLocation.quantity > 0)).order_by(Inventory.name).all()

    return render_template('index.html', inventory=inventory_items)

@app.route('/add_item', methods=['GET', 'POST'])
@login_required
def add_item():
    """Adds a new item or adds stock to an existing item/location."""
    if request.method == 'POST':
        try:
            name = request.form.get('name', '').strip()
            location_name = request.form.get('location', '').strip()
            quantity_str = request.form.get('quantity', '').strip()
            description = request.form.get('description', '').strip()
            category = request.form.get('category', 'Uncategorized').strip()
            condition = request.form.get('condition', 'Unknown').strip()

            if not name:
                raise ValueError("Item name is required.")
            if not location_name:
                raise ValueError("Location is required.")
            if not quantity_str:
                raise ValueError("Quantity is required.")

            quantity = int(quantity_str)
            if quantity <= 0:
                raise ValueError("Quantity must be a positive number.")

            location = get_or_create_location(location_name)
            item = Inventory.query.filter_by(name=name, description=description).first()

            if not item:
                item = Inventory(
                    name=name, description=description,
                    category=category, condition=condition
                )
                db.session.add(item)
                db.session.flush()
                item_loc = ItemLocation(item_id=item.id, location_id=location.id, quantity=quantity)
                db.session.add(item_loc)
                flash('New item added successfully!', 'success')
            else:
                item_loc = ItemLocation.query.filter_by(item_id=item.id, location_id=location.id).first()
                if item_loc:
                    item_loc.quantity += quantity
                    flash('Stock quantity updated successfully.', 'success')
                else:
                    item_loc = ItemLocation(item_id=item.id, location_id=location.id, quantity=quantity)
                    db.session.add(item_loc)
                    flash('Existing item added to new location.', 'success')

            db.session.commit()
            return redirect(url_for('index'))

        except ValueError as e:
            db.session.rollback()
            flash(str(e), 'danger')
        except Exception as e:
            db.session.rollback()
            flash(f'An unexpected error occurred: {str(e)}', 'danger')
            current_app.logger.error(f'Error adding/updating item: {e}', exc_info=True)

        categories = [c[0] for c in db.session.query(Inventory.category.distinct()).all() if c[0]]
        conditions = [c[0] for c in db.session.query(Inventory.condition.distinct()).all() if c[0]]
        locations = Location.query.order_by(Location.name).all()
        return render_template('add_item.html',
                               categories=categories, conditions=conditions, locations=locations,
                               form_data=request.form)

    categories = [c[0] for c in db.session.query(Inventory.category.distinct()).all() if c[0]]
    conditions = [c[0] for c in db.session.query(Inventory.condition.distinct()).all() if c[0]]
    locations = Location.query.order_by(Location.name).all()
    return render_template('add_item.html',
                           categories=categories,
                           conditions=conditions,
                           locations=locations,
                           active_page='add_item')


@app.route('/edit_items')
@login_required
def edit_items():
    """Displays all inventory items for editing, including items with zero stock."""
    search_query = request.args.get('q', '').strip()
    
    query = Inventory.query.options(
        db.joinedload(Inventory.locations).joinedload(ItemLocation.location)
    ).order_by(Inventory.name)
    
    if search_query:
        search_term = f'%{search_query}%'
        query = query.filter(
            db.or_(
                Inventory.name.ilike(search_term),
                Inventory.description.ilike(search_term),
                Inventory.category.ilike(search_term),
                Inventory.condition.ilike(search_term)
            )
        )
    
    return render_template('edit_items.html',
                         inventory=query.all(),
                         search_query=search_query,
                         active_page='edit_items')
                         

@app.route('/edit_item/<int:item_id>', methods=['GET', 'POST'])
@login_required
def edit_item(item_id):
    """Edits inventory item details including all stock locations and quantities."""
    item = Inventory.query.options(
        db.joinedload(Inventory.locations).joinedload(ItemLocation.location)
    ).get_or_404(item_id)
    
    locations = Location.query.order_by(Location.name).all()
    categories = db.session.query(Inventory.category.distinct()).all()
    conditions = db.session.query(Inventory.condition.distinct()).all()

    if request.method == 'POST':
        try:
            # 1. Process core item data (name, description, etc.)
            item.name = request.form.get('name', '').strip()
            item.description = request.form.get('description', '').strip()
            item.category = request.form.get('category', 'Uncategorized').strip()
            item.condition = request.form.get('condition', 'Unknown').strip()

            if not item.name:
                raise ValueError("Item name cannot be empty.")

            # 2. Process updates for existing locations
            item_loc_ids = request.form.getlist('item_location_id')
            quantities = request.form.getlist('quantity')
            location_names = request.form.getlist('location_name') # <-- Get the list of location names
            
            for i, loc_id in enumerate(item_loc_ids):
                item_loc = db.session.get(ItemLocation, int(loc_id))
                if not (item_loc and item_loc.item_id == item.id):
                    continue

                new_quantity = int(quantities[i])
                new_location_name = location_names[i].strip()

                if not new_location_name:
                    raise ValueError("Location name cannot be empty.")

                # If quantity is 0, just delete the record and continue
                if new_quantity <= 0:
                    db.session.delete(item_loc)
                    continue
                
                # Update quantity
                item_loc.quantity = new_quantity
                
                # Check if the location name has been changed
                if item_loc.location.name != new_location_name:
                    new_location_obj = get_or_create_location(new_location_name)
                    
                    # IMPORTANT: Check if the item already has stock at the new target location
                    target_loc = ItemLocation.query.filter_by(
                        item_id=item.id,
                        location_id=new_location_obj.id
                    ).first()

                    if target_loc:
                        # Merge quantities and delete the old record
                        target_loc.quantity += new_quantity
                        db.session.delete(item_loc)
                    else:
                        # Simply re-assign the location if no stock exists at the target
                        item_loc.location_id = new_location_obj.id

            # 3. Handle adding the item to a brand-new location
            new_location_name = request.form.get('new_location', '').strip()
            new_quantity_str = request.form.get('new_quantity', '').strip()

            if new_location_name and new_quantity_str:
                new_quantity = int(new_quantity_str)
                if new_quantity > 0:
                    location = get_or_create_location(new_location_name)
                    existing_loc = ItemLocation.query.filter_by(item_id=item.id, location_id=location.id).first()
                    if existing_loc:
                        existing_loc.quantity += new_quantity
                    else:
                        new_item_loc = ItemLocation(item_id=item.id, location_id=location.id, quantity=new_quantity)
                        db.session.add(new_item_loc)
                else:
                    raise ValueError("New quantity must be a positive number.")

            db.session.commit()
            flash('Item updated successfully!', 'success')
            return redirect(url_for('edit_items'))

        except ValueError as e:
            db.session.rollback()
            flash(str(e), 'danger')
        except Exception as e:
            db.session.rollback()
            flash(f'An error occurred: {str(e)}', 'danger')
            current_app.logger.error(f'Error editing item {item_id}: {e}', exc_info=True)
    
    return render_template('edit_item.html',
                         item=item,
                         locations=locations,
                         categories=[c[0] for c in categories if c[0]],
                         conditions=[c[0] for c in conditions if c[0]])

@app.route('/delete_items')
@login_required
def delete_items():
    """Displays all inventory items for deletion."""
    search_query = request.args.get('q', '').strip()
    
    # Base query with eager loading
    query = Inventory.query.options(
        db.joinedload(Inventory.locations).joinedload(ItemLocation.location)
    ).order_by(Inventory.name)
    
    # Apply search filter if query exists
    if search_query:
        search_term = f'%{search_query}%'
        query = query.filter(
            db.or_(
                Inventory.name.ilike(search_term),
                Inventory.description.ilike(search_term),
                Inventory.category.ilike(search_term),
                Inventory.condition.ilike(search_term)
            )
        )
    
    # Get filter options
    categories = [c[0] for c in db.session.query(Inventory.category.distinct()).all() if c[0]]
    conditions = [c[0] for c in db.session.query(Inventory.condition.distinct()).all() if c[0]]
    locations = [l.name for l in Location.query.order_by(Location.name).all()]

    return render_template('delete_items.html',
                         inventory=query.all(),
                         search_query=search_query,
                         categories=categories,
                         conditions=conditions,
                         locations=locations,
                         active_page="delete_items")

@app.route('/delete_item/<int:item_id>', methods=['GET', 'POST'])
@login_required
def delete_item(item_id):
    """Handles item deletion with confirmation."""
    item = Inventory.query.get_or_404(item_id)
    
    if request.method == 'POST':
        # Server-side confirmation check
        if not request.form.get('confirmation'):
            flash('Deletion confirmation required', 'danger')
            return redirect(url_for('delete_item', item_id=item_id))
            
        try:
            # Delete related records first to avoid foreign key constraint issues
            # This is needed because SQLite doesn't support ON DELETE CASCADE properly
            DisposedItem.query.filter_by(item_id=item.id).delete(synchronize_session=False)
            Movement.query.filter_by(item_id=item.id).delete(synchronize_session=False)
            ItemLocation.query.filter_by(item_id=item.id).delete(synchronize_session=False)
            
            # Now delete the item
            db.session.delete(item)
            db.session.commit()
            flash(f'Item "{item.name}" deleted successfully!', 'success')
            return redirect(url_for('delete_items'))
            
        except Exception as e:
            db.session.rollback()
            flash(f'Error deleting item: {str(e)}', 'danger')
            current_app.logger.error(f'Error deleting item {item_id}: {e}', exc_info=True)
            return redirect(url_for('delete_items'))

    return render_template('delete_item.html', item=item)


@app.route('/dispose_item/<int:item_id>', methods=['GET', 'POST'])
@login_required
def dispose_item(item_id):
    """Records the disposal of a certain quantity of an item from a location."""
    item = Inventory.query.get_or_404(item_id)
    locations_data = db.session.query(Location, ItemLocation.quantity).join(ItemLocation, Location.id == ItemLocation.location_id).filter(ItemLocation.item_id == item.id, ItemLocation.quantity > 0).order_by(Location.name).all()

    if request.method == 'POST':
        try:
            location_id = int(request.form.get('location'))
            quantity = int(request.form.get('quantity'))
            if quantity <= 0:
                raise ValueError("Quantity must be positive.")
            item_location = ItemLocation.query.filter_by(item_id=item.id, location_id=location_id).first()
            if not item_location or item_location.quantity < quantity:
                raise ValueError("Insufficient stock at the selected location.")
            disposal_record = DisposedItem(
                item_id=item.id, location_id=location_id, quantity=quantity,
                reason=request.form.get('reason', '').strip(),
                disposed_date=datetime.strptime(request.form.get('date'), '%Y-%m-%d').date(),
                disposed_by=current_user.username,
                notes=request.form.get('notes', '').strip()
            )
            db.session.add(disposal_record)
            item_location.quantity -= quantity
            if item_location.quantity == 0:
                db.session.delete(item_location)
            db.session.commit()
            flash('Disposal recorded successfully!', 'success')
            return redirect(url_for('disposed_inventory'))
        except ValueError as e:
            db.session.rollback()
            flash(str(e), 'danger')
        except Exception as e:
            db.session.rollback()
            flash(f'An unexpected error occurred during disposal: {str(e)}', 'danger')
            current_app.logger.error(f'Error processing disposal for item {item_id}: {e}', exc_info=True)

    if not locations_data and request.method == 'GET':
        flash('This item has no stock available for disposal.', 'warning')
        return redirect(url_for('index'))

    return render_template('dispose_form.html',
                           item=item,
                           locations_data=locations_data,
                           date_today=datetime.now().date().isoformat())

@app.route('/transfer', methods=['GET', 'POST'])
@login_required
def transfer():
    """Handle stock transfers between locations"""
    items = Inventory.query.options(
        db.joinedload(Inventory.locations).joinedload(ItemLocation.location)
        ).filter(Inventory.locations.any(ItemLocation.quantity > 0)
        ).order_by(Inventory.name).all()
    
    all_locations = Location.query.order_by(Location.name).all()
    
    if request.method == 'POST':
        try:
            # Validate required fields
            item_id = int(request.form.get('item_id', 0))
            from_location_id = int(request.form.get('from_location', 0))
            to_location_id = int(request.form.get('to_location', 0))
            quantity = int(request.form.get('quantity', 0))
            responsible = request.form.get('responsible', current_user.username).strip()
            
            if not all([item_id, from_location_id, to_location_id, quantity]):
                flash("All fields are required", "danger")
                return redirect(url_for('transfer'))
            
            if from_location_id == to_location_id:
                flash("Source and destination locations must be different", "danger")
                return redirect(url_for('transfer'))
            
            if quantity <= 0:
                flash("Quantity must be positive", "danger")
                return redirect(url_for('transfer'))

            # Find source stock
            source = ItemLocation.query.filter_by(
                item_id=item_id,
                location_id=from_location_id
            ).first()
            
            if not source or source.quantity < quantity:
                flash("Insufficient stock in source location", "danger")
                return redirect(url_for('transfer'))

            # Find/Create destination stock
            destination = ItemLocation.query.filter_by(
                item_id=item_id,
                location_id=to_location_id
            ).first()
            
            if not destination:
                destination = ItemLocation(
                    item_id=item_id,
                    location_id=to_location_id,
                    quantity=0
                )
                db.session.add(destination)

            # Perform transfer
            source.quantity -= quantity
            destination.quantity += quantity

            # Record movement
            movement = Movement(
                item_id=item_id,
                quantity=quantity,
                from_location_id=from_location_id,
                to_location_id=to_location_id,
                movement_date=datetime.now(timezone.utc),
                responsible_person=responsible
            )
            db.session.add(movement)
            
            db.session.commit()
            flash("Transfer completed successfully", "success")
            return redirect(url_for('movements'))

        except ValueError:
            flash("Invalid input values", "danger")
            return redirect(url_for('transfer'))
        except Exception as e:
            db.session.rollback()
            current_app.logger.error(f"Transfer error: {str(e)}", exc_info=True)
            flash("An error occurred during transfer", "danger")
            return redirect(url_for('transfer'))

    # GET request handling
    item_id = request.args.get('item_id', type=int)
    selected_item = next((i for i in items if i.id == item_id), None)
    
    available_locations = []
    if selected_item:
        available_locations = [
            (il.location, il.quantity)
            for il in selected_item.locations
            if il.quantity > 0
        ]

    return render_template('transfer.html',
        items=items,
        all_locations=all_locations,
        selected_item=selected_item,
        available_locations=available_locations,
        date_today=datetime.now(timezone.utc).date().isoformat())

# ---------- CSV HANDLING ---------- #

@app.route('/import_csv', methods=['POST'])
@login_required
def import_csv():
    """Handles CSV imports for different inventory contexts."""
    context = request.form.get('context', '').lower()
    if context not in ['current_inventory', 'movement_tracker', 'disposed_items']:
        flash('Invalid import context specified', 'danger')
        return redirect(request.referrer)

    if 'csv_file' not in request.files or not request.files['csv_file'].filename:
        flash('No file uploaded', 'warning')
        return redirect(request.referrer)

    file = request.files['csv_file']
    try:
        stream = StringIO(file.read().decode('utf-8-sig'))
        csv_reader = csv.DictReader(stream)
        for row in csv_reader:
            if context == 'current_inventory':
                process_inventory_row(row)
            elif context == 'movement_tracker':
                process_movement_row(row)
            elif context == 'disposed_items':
                process_disposed_item_row(row, current_user)
        db.session.commit()
        flash('CSV imported successfully', 'success')
    except Exception as e:
        db.session.rollback()
        flash(f'Import failed: {str(e)}', 'danger')
        current_app.logger.error(f'CSV Import Failure: {str(e)}', exc_info=True)
    return redirect(url_for('index'))

@app.route('/export_csv')
@login_required
def export_csv():
    """Handles both single CSV and combined ZIP exports."""
    export_type = request.args.get('type', 'inventory')
    timestamp = datetime.now(timezone.utc).strftime("%Y%m%d_%H%M%S")

    if export_type == 'all':
        buffer = BytesIO()
        with zipfile.ZipFile(buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
            zip_file.writestr(f'inventory_{timestamp}.csv', generate_inventory_csv())
            zip_file.writestr(f'movements_{timestamp}.csv', generate_movements_csv())
            zip_file.writestr(f'disposals_{timestamp}.csv', generate_disposals_csv())
        buffer.seek(0)
        return send_file(buffer, download_name=f'export_all_{timestamp}.zip', as_attachment=True, mimetype='application/zip')

    data = {
        'inventory': generate_inventory_csv,
        'movements': generate_movements_csv,
        'disposals': generate_disposals_csv
    }.get(export_type, lambda: abort(400))()
    buffer = BytesIO()
    buffer.write(data.encode('utf-8-sig'))
    buffer.seek(0)
    return send_file(buffer, download_name=f'{export_type}_{timestamp}.csv', as_attachment=True, mimetype='text/csv')

@app.route('/download_template')
@login_required
def download_template():
    template_type = request.args.get('type', 'inventory')
    timestamp = datetime.now(timezone.utc).strftime("%Y%m%d_%H%M%S")
    
    if template_type == 'all':
        # Create ZIP with all templates
        buffer = BytesIO()
        with zipfile.ZipFile(buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
            inv_data = generate_inventory_template()
            zip_file.writestr(f'inventory_template_{timestamp}.csv', inv_data)
            mov_data = generate_movements_template()
            zip_file.writestr(f'movements_template_{timestamp}.csv', mov_data)
            dis_data = generate_disposals_template()
            zip_file.writestr(f'disposals_template_{timestamp}.csv', dis_data)
        buffer.seek(0)
        return send_file(
            buffer,
            download_name=f'all_templates_{timestamp}.zip',
            as_attachment=True,
            mimetype='application/zip'
        )
    elif template_type == 'inventory':
        data = generate_inventory_template()
        filename = f'inventory_template_{timestamp}.csv'
    elif template_type == 'movements':
        data = generate_movements_template()
        filename = f'movements_template_{timestamp}.csv'
    elif template_type == 'disposals':
        data = generate_disposals_template()
        filename = f'disposals_template_{timestamp}.csv'
    else:
        abort(400, "Invalid template type")

    buffer = BytesIO()
    buffer.write(data.encode('utf-8-sig'))
    buffer.seek(0)
    return send_file(
        buffer,
        download_name=filename,
        as_attachment=True,
        mimetype='text/csv'
    )

# ---------- REPORTING / VIEW ROUTES ---------- #

@app.route('/disposed')
@login_required
def disposed_inventory():
    """Displays a searchable list of disposed items."""
    search_query = request.args.get('q', '').strip()
    query = DisposedItem.query.options(
        db.joinedload(DisposedItem.item),
        db.joinedload(DisposedItem.location)
    )
    if search_query:
        search_term = f'%{search_query}%'
        query = query.join(Inventory).join(Location).filter(
            db.or_(
                Inventory.name.ilike(search_term),
                Location.name.ilike(search_term),
                DisposedItem.reason.ilike(search_term)
            )
        )
    disposed_items = query.order_by(DisposedItem.disposed_date.desc()).all()
    return render_template('disposed.html', disposed_items=disposed_items, search_query=search_query)

@app.route('/search')
@login_required
def search():
    """Searches active inventory."""
    query_str = request.args.get('q', '').strip()
    if not query_str:
        return redirect(url_for('index'))

    search_term = f'%{query_str}%'
    results = Inventory.query.options(
        db.joinedload(Inventory.locations).joinedload(ItemLocation.location)
    ).filter(
        Inventory.locations.any(ItemLocation.quantity > 0)
    ).filter(
        db.or_(
            Inventory.name.ilike(search_term),
            Inventory.description.ilike(search_term)
        )
    ).order_by(Inventory.name).all()
    return render_template('index.html', inventory=results, search_query=query_str)

@app.route('/movements')
@login_required
def movements():
    """Displays movement history with search functionality."""
    search_query = request.args.get('q', '').strip()
    
    # Base query
    query = Movement.query.options(
        db.joinedload(Movement.item),
        db.joinedload(Movement.from_location),
        db.joinedload(Movement.to_location)
    )
    
    if search_query:
        search_term = f'%{search_query}%'
        query = query.join(Inventory).outerjoin(Location,
            (Movement.from_location_id == Location.id) |
            (Movement.to_location_id == Location.id)
        ).filter(
            db.or_(
                Inventory.name.ilike(search_term),
                Movement.responsible_person.ilike(search_term),
                Location.name.ilike(search_term)
            )
        )

    movements_log = query.order_by(Movement.movement_date.desc()).all()
    
    return render_template('movements.html', 
                         movements=movements_log, 
                         search_query=search_query)

@app.route('/item/<int:item_id>')
@login_required
def item_detail(item_id):
    """Displays details for a specific item."""
    item = Inventory.query.options(
        db.joinedload(Inventory.locations).joinedload(ItemLocation.location)
    ).get_or_404(item_id)
    return render_template('item_detail.html', item=item)

@app.route('/location/<int:location_id>')
@login_required
def location_detail(location_id):
    """Displays details for a specific location."""
    location = Location.query.get_or_404(location_id)
    items_at_location = ItemLocation.query.filter_by(location_id=location_id).all()
    return render_template('location_detail.html', location=location, items=items_at_location)
--- END OF FILE: routes.py ---

--- START OF FILE: utils.py ---
from extensions import db
from models import User, Inventory, Location, ItemLocation, Movement, DisposedItem
from flask import current_app
from datetime import datetime, timezone
import csv
from io import StringIO

# --- Helper Functions ---

def get_or_create_location(name):
    """
    Retrieves a location by name or creates a new one if it doesn't exist.
    Adds the new location to the database session and flushes to assign an ID.
    """
    normalized_name = name.strip().title()
    if not normalized_name:
        raise ValueError("Location name cannot be empty.")
    location = Location.query.filter_by(name=normalized_name).first()
    if not location:
        current_app.logger.info(f"Creating new location: {normalized_name}")
        location = Location(name=normalized_name)
        db.session.add(location)
        db.session.flush()  # Assign ID
    return location

def validate_positive_int(value):
    """
    Validates that the input is a positive integer.
    Raises ValueError if the input is invalid or non-positive.
    """
    try:
        num = int(value)
        if num <= 0:
            raise ValueError
        return num
    except ValueError:
        raise ValueError(f"Invalid quantity value: {value}")

def validate_date(date_str):
    """
    Validates and parses a date string in 'YYYY-MM-DD' format.
    Returns a timezone-aware datetime object.
    """
    try:
        return datetime.strptime(date_str, '%Y-%m-%d').replace(tzinfo=timezone.utc)
    except ValueError:
        raise ValueError(f"Invalid date format: {date_str}. Use YYYY-MM-DD")

# --- CSV Processing Functions ---

def process_inventory_row(row):
    """
    Processes a single row from an inventory CSV import.
    Creates or updates inventory items and their locations.
    """
    item_name = row['Name'].strip()
    location_name = row['Location'].strip()
    quantity = validate_positive_int(row['Quantity'])
    item = Inventory.query.filter_by(name=item_name).first()
    if not item:
        item = Inventory(
            name=item_name,
            description=row.get('Description', '').strip(),
            category=row.get('Category', 'Uncategorized').strip(),
            condition=row.get('Condition', 'Unknown').strip()
        )
        db.session.add(item)
        db.session.flush()
    location = get_or_create_location(location_name)
    item_loc = ItemLocation.query.filter_by(item_id=item.id, location_id=location.id).first()
    if item_loc:
        item_loc.quantity += quantity
    else:
        item_loc = ItemLocation(item_id=item.id, location_id=location.id, quantity=quantity)
        db.session.add(item_loc)

def process_movement_row(row):
    """
    Processes a single row from a movement CSV import.
    Creates movement records and handles item creation if necessary.
    """
    item_name = row['Name'].strip()
    item = Inventory.query.filter_by(name=item_name).first()
    if not item:
        item = Inventory(name=item_name, description="Auto-created from movement import")
        db.session.add(item)
        db.session.flush()
        current_app.logger.info(f"Created new item during movement import: {item_name}")
    quantity = validate_positive_int(row['Quantity'])
    movement_date = validate_date(row['MovementDate'])
    from_loc_name = row.get('FromLocation', '').strip()
    to_loc_name = row.get('ToLocation', '').strip()
    from_loc = get_or_create_location(from_loc_name) if from_loc_name else None
    to_loc = get_or_create_location(to_loc_name) if to_loc_name else None
    if not from_loc and not to_loc:
        raise ValueError("Must specify at least one location (FromLocation or ToLocation)")
    movement = Movement(
        item_id=item.id,
        quantity=quantity,
        from_location_id=from_loc.id if from_loc else None,
        to_location_id=to_loc.id if to_loc else None,
        movement_date=movement_date,
        responsible_person=row['ResponsiblePerson'].strip(),
        notes=row.get('Notes', '').strip()
    )
    db.session.add(movement)

def process_disposed_item_row(row, current_user):
    """
    Processes a single row from a disposed items CSV import.
    Creates disposal records and handles item creation if necessary.
    """
    item_name = row['Name'].strip()
    item = Inventory.query.filter_by(name=item_name).first()
    if not item:
        item = Inventory(name=item_name)
        db.session.add(item)
        db.session.flush()
    location_name = row['Location'].strip()
    location = get_or_create_location(location_name)
    disposal = DisposedItem(
        item_id=item.id,
        location_id=location.id,
        quantity=validate_positive_int(row['Quantity']),
        disposed_date=validate_date(row['DisposalDate']),
        reason=row['Reason'].strip(),
        disposed_by=current_user.username,
        notes=row.get('Notes', '').strip()
    )
    db.session.add(disposal)

# --- CSV Generation Functions ---

def generate_inventory_csv():
    """
    Generates a CSV string of the current inventory with positive quantities.
    """
    output = StringIO()
    writer = csv.writer(output)
    writer.writerow(['Item ID', 'Name', 'Description', 'Category', 'Condition', 'Location', 'Quantity'])
    items = Inventory.query.options(
        db.joinedload(Inventory.locations).joinedload(ItemLocation.location)
    ).filter(
        Inventory.locations.any(ItemLocation.quantity > 0)
    ).all()
    for item in items:
        for loc in item.locations:
            if loc.quantity > 0:
                writer.writerow([
                    item.id,
                    item.name,
                    item.description,
                    item.category,
                    item.condition,
                    loc.location.name,
                    loc.quantity
                ])
    return output.getvalue()

def generate_movements_csv():
    """
    Generates a CSV string of the movement history.
    """
    output = StringIO()
    writer = csv.writer(output)
    writer.writerow(['Movement ID', 'Item', 'Quantity', 'From Location', 'To Location', 'Date', 'Responsible Person'])
    movements = Movement.query.options(
        db.joinedload(Movement.item),
        db.joinedload(Movement.from_location),
        db.joinedload(Movement.to_location)
    ).order_by(Movement.movement_date.desc()).all()
    for move in movements:
        writer.writerow([
            move.id,
            move.item.name,
            move.quantity,
            move.from_location.name if move.from_location else 'N/A',
            move.to_location.name if move.to_location else 'N/A',
            move.movement_date.strftime('%Y-%m-%d %H:%M'),
            move.responsible_person
        ])
    return output.getvalue()

def generate_disposals_csv():
    """
    Generates a CSV string of the disposed items.
    """
    output = StringIO()
    writer = csv.writer(output)
    writer.writerow(['Disposal ID', 'Item', 'Location', 'Quantity', 'Reason', 'Disposal Date', 'Disposed By', 'Notes'])
    disposals = DisposedItem.query.options(
        db.joinedload(DisposedItem.item),
        db.joinedload(DisposedItem.location)
    ).order_by(DisposedItem.disposed_date.desc()).all()
    for disposal in disposals:
        writer.writerow([
            disposal.id,
            disposal.item.name,
            disposal.location.name,
            disposal.quantity,
            disposal.reason,
            disposal.disposed_date.strftime('%Y-%m-%d'),
            disposal.disposed_by,
            disposal.notes
        ])
    return output.getvalue()

# --- Template Generation Functions ---

def generate_inventory_template():
    """
    Generates a CSV template for inventory import.
    """
    output = StringIO()
    writer = csv.writer(output)
    writer.writerow(['Name', 'Location', 'Quantity', 'Description', 'Category', 'Condition'])
    writer.writerow(['Altar Candle', 'Sacristy', 10, 'Beeswax candles, 12" height', 'Liturgical', 'New'])
    return output.getvalue()

def generate_movements_template():
    """
    Generates a CSV template for movement import.
    """
    output = StringIO()
    writer = csv.writer(output)
    writer.writerow(['Name', 'Quantity', 'MovementDate', 'ResponsiblePerson', 'FromLocation', 'ToLocation', 'Notes'])
    writer.writerow(['Communion Chalice', 2, '2025-05-01', 'John Doe', 'Storage Room', 'Main Church', 'Weekly service stock'])
    return output.getvalue()

def generate_disposals_template():
    """
    Generates a CSV template for disposed items import.
    """
    output = StringIO()
    writer = csv.writer(output)
    writer.writerow(['Name', 'Location', 'Quantity', 'DisposalDate', 'Reason'])
    writer.writerow(['Damaged Chair', 'Sanctuary', 1, '2025-05-01', 'Broken legs'])
    return output.getvalue()
--- END OF FILE: utils.py ---

--- START OF FILE: static/css/style.css ---
/* static/css/style.css */
/* ===== CORE CUSTOM STYLES ===== */
.card-inventory {
    border-left: 6px solid #404040;
    transition: border-color 0.3s ease;
    min-height: 600px;
}

.table-hover tbody tr:hover {
    background-color: rgba(0, 0, 0, 0.03);
}

.bi {
    font-size: 1.2rem;
    vertical-align: middle;
}

.nav-brand-icon {
    font-size: 1.5rem;
    margin-right: 0.5rem;
}

/* ===== THEME SYSTEM ===== */
.theme-bg-success { background-color: #1a5632 !important; }
.theme-bg-primary { background-color: #2c3e50 !important; }
.theme-bg-danger { background-color: #6b2a2a !important; }
.theme-bg-dark { background-color: #303030 !important; }

/* ===== STABLE LAYOUT ADDITIONS ===== */
.main-content-card {
    display: grid;
    grid-template-rows: auto 1fr;
    min-height: 70vh;
    overflow: hidden;
}

.stable-table-container {
    height: calc(100vh - 280px);
    min-height: 400px;
    overflow-y: auto;
}

.fixed-header {
    height: 65px;
    display: flex;
    align-items: center;
    flex-shrink: 0;
}

/* ===== NAVIGATION STATES ===== */
.nav-theme {
    position: relative;
    border: none !important;
    transition: all 0.3s ease;
}

.nav-theme.active::after,
.btn-outline-light.btn-sm.active::after {
    content: '';
    display: block;
    width: 100%;
    height: 3px;
    background: #fff;
    position: absolute;
    bottom: -1px;
    left: 0;
    animation: border-appear 0.3s ease;
}

/* ===== BUTTON STYLES ===== */
.btn-outline-light.btn-sm {
    font-size: 0.9rem;
    padding: 0.25rem 0.75rem;
    position: relative;
    border-color: rgba(255,255,255,0.3);
    height: 34px;
}

.btn-outline-light.btn-sm:hover {
    background-color: rgba(255,255,255,0.1);
    border-color: rgba(255,255,255,0.5);
}

/* ===== SEARCH COMPONENT ===== */
.search-container {
    max-width: 600px;
    min-width: 240px;
    flex-shrink: 0;
}

.theme-search {
    background-color: rgba(255,255,255,0.1) !important;
    border-color: rgba(255,255,255,0.2) !important;
    color: white !important;
}

.theme-search::placeholder {
    color: rgba(255,255,255,0.7) !important;
}

.theme-search-btn {
    background-color: rgba(255,255,255,0.1) !important;
    border-color: rgba(255,255,255,0.2) !important;
    color: white !important;
}

/* ===== CSV CONTROLS ===== */
.theme-controls {
    display: flex;
    gap: 0.5rem;
    align-items: center;
    min-height: 40px;
}

.csv-btn-group .btn {
    border-radius: 20px;
    padding: 0.375rem 1rem;
    transition: all 0.2s ease;
    height: 38px;
}

.theme-controls-success .csv-btn-group .btn {
    background-color: rgba(255,255,255,0.1);
    border: 1px solid rgba(255,255,255,0.3);
    color: white;
}

.theme-controls-success .csv-btn-group .btn:hover {
    background-color: rgba(255,255,255,0.2);
    border-color: rgba(255,255,255,0.6);
}

.theme-controls-primary .csv-btn-group .btn {
    background-color: rgba(255,255,255,0.1);
    border: 1px solid #3498db;
    color: white;
}

.theme-controls-danger .csv-btn-group .btn {
    background-color: rgba(255,255,255,0.1);
    border: 1px solid #e74c3c;
    color: white;
}

.csv-icon {
    font-size: 1rem;
    margin-right: 0.5rem;
}

/* ===== THEME CONTROL BUTTONS ===== */
.theme-control-btn {
    background-color: rgba(255,255,255,0.1);
    border: 1px solid rgba(255,255,255,0.3);
    color: white;
    padding: 0.375rem 1rem;
    transition: all 0.2s ease;
    border-radius: 0.25rem;
    text-decoration: none;
    display: inline-flex;
    align-items: center;
    line-height: 1.5;
    height: 38px;
}

.theme-control-btn:hover {
    background-color: rgba(255,255,255,0.2);
    border-color: rgba(255,255,255,0.6);
    color: white;
}

.theme-control-btn .bi {
    vertical-align: middle;
    margin-right: 0.5rem;
    font-size: 1rem;
}

/* ===== ANIMATIONS ===== */
@keyframes border-appear {
    from { width: 50% }
    to { width: 100% }
}

/* ===== STABLE SCROLL AREAS ===== */
.stable-scroll-area {
    overflow: hidden;
    flex: 1;
    display: grid;
    grid-template-rows: auto 1fr;
}

.table-header-lock thead {
    position: sticky;
    top: 0;
    background: white;
    z-index: 2;
}

/* ===== RESPONSIVE ADJUSTMENTS ===== */
@media (max-width: 768px) {
    .search-container {
        width: 100%;
    }
    
    .theme-control-btn {
        flex: 1;
        min-width: 120px;
    }
    
    .stable-table-container {
        height: calc(100vh - 320px);
    }
}

/* ===== DROPDOWN MENU ===== */
.dropdown-menu {
    background-color: #505050;
    border-color: #404040;
}

.dropdown-item {
    color: #e0e0e0;
}

.dropdown-item:hover {
    background-color: #404040;
    color: white;
}

/* ===== AUTHENTICATION STYLES ===== */
.login-container {
    max-width: 400px;
    margin: 2rem auto;
}

.auth-card {
    border: 1px solid rgba(0,0,0,0.1);
    border-radius: 0.5rem;
    box-shadow: 0 0.5rem 1rem rgba(0,0,0,0.1);
}

/* ===== FORM ELEMENTS ===== */
.form-icon {
    font-size: 1.5rem;
    margin-right: 0.75rem;
}

.btn-outline-light.btn-sm.active {
    background-color: rgba(255,255,255,0.2);
    border-color: rgba(255,255,255,0.6);
    color: #fff;
}

.invisible-placeholder {
        visibility: hidden !important;
        pointer-events: none !important; /* Ensures no interaction with the hidden element */
}
--- END OF FILE: static/css/style.css ---

--- START OF FILE: static/js/scripts.js ---
// JavaScript functions for the Church Inventory System

// Utility function to get current time
function getCurrentTime() {
    return new Date().toLocaleTimeString();
}

// Delete item page functionality
function initializeDeleteItemPage() {
    const checkbox = document.getElementById('confirmDelete');
    const deleteBtn = document.getElementById('deleteButton');
    const form = document.getElementById('deleteForm');
    
    if (checkbox && deleteBtn) {
        console.log('Delete page elements found');
        console.log('Initial checkbox state:', checkbox.checked);
        console.log('Initial button disabled state:', deleteBtn.disabled);
        console.log('Checkbox value:', checkbox.value);
        
        checkbox.addEventListener('change', function() {
            deleteBtn.disabled = !this.checked;
            console.log('Checkbox changed, delete button disabled:', !this.checked);
            console.log('Checkbox checked:', this.checked);
            console.log('Button disabled after change:', deleteBtn.disabled);
            console.log('Checkbox value:', this.value);
        });
        
        // Set initial state based on checkbox state
        deleteBtn.disabled = !checkbox.checked;
        console.log('Initial button disabled state set to:', !checkbox.checked);
    }
    
    // Handle form submission - ONLY for debugging, don't prevent default
    if (form) {
        form.addEventListener('submit', function(e) {
            console.log('Delete form submission event triggered');
            console.log('Checkbox state at submit:', checkbox ? checkbox.checked : 'no checkbox');
            console.log('Checkbox value at submit:', checkbox ? checkbox.value : 'no checkbox');
            console.log('Form data being submitted:');
            
            // Log form data
            const formData = new FormData(form);
            for (let [key, value] of formData.entries()) {
                console.log(key, value);
            }
            
            // DO NOT prevent default - let the form submit normally
            console.log('Form will submit normally');
        });
    }
}

// Disposal form functionality
function initializeDisposalForm() {
    try {
        console.log('Initializing disposal form');
        
        // Quantity validation logic
        function updateQuantityMax(selectElement) {
            // Check if selectElement and its options are valid
            if (!selectElement || !selectElement.options || selectElement.selectedIndex < 0) {
                console.log('Invalid select element or no option selected');
                return;
            }
            
            const selectedOption = selectElement.options[selectElement.selectedIndex];
            if (!selectedOption) {
                console.log('No selected option found');
                return;
            }
            
            const quantityInput = selectElement.closest('.disposal-entry').querySelector('input[name="quantity"]');
            if (!quantityInput) {
                console.log('No quantity input found');
                return;
            }
            
            const maxQty = parseInt(selectedOption.dataset.max || 0);
            console.log('Setting max quantity to:', maxQty);
            
            quantityInput.max = maxQty;
            quantityInput.setCustomValidity(
                maxQty === 0 ? 'No quantity available in this location' : ''
            );
            
            if(quantityInput.value > maxQty) {
                quantityInput.value = maxQty;
            }
        }

        // Initialize all selects on load
        const locationSelects = document.querySelectorAll('select[name="location"]');
        console.log('Found location selects:', locationSelects.length);
        locationSelects.forEach(select => {
            try {
                console.log('Processing select:', select);
                if(select.value) {
                    console.log('Select has value, updating quantity max');
                    updateQuantityMax(select);
                }
            } catch (e) {
                console.error('Error processing select:', e);
            }
        });

        // Update on location change
        const disposalEntries = document.getElementById('disposalEntries');
        console.log('Disposal entries element:', disposalEntries);
        if (disposalEntries) {
            disposalEntries.addEventListener('change', function(e) {
                try {
                    console.log('Change event detected:', e.target.name);
                    if (e.target.name === 'location') {
                        console.log('Location changed, updating quantity max');
                        updateQuantityMax(e.target);
                    }
                } catch (e) {
                    console.error('Error in change event handler:', e);
                }
            });
        } else {
            console.log('Disposal entries element not found');
        }
    } catch (e) {
        console.error('Error initializing disposal form:', e);
    }
}

// Initialize functions based on the current page
document.addEventListener('DOMContentLoaded', function() {
    console.log("Church Inventory System - JavaScript loaded successfully!");
    
    // Check if we're on the delete item page
    const deleteForm = document.getElementById('deleteForm');
    console.log('Delete form found:', !!deleteForm);
    if (deleteForm) {
        console.log("Initializing delete item page");
        initializeDeleteItemPage();
    }
    
    // Check if we're on the disposal form page
    const disposalForm = document.getElementById('disposalForm');
    console.log('Disposal form found:', !!disposalForm);
    if (disposalForm) {
        console.log("Initializing disposal form page");
        initializeDisposalForm();
    }
});
--- END OF FILE: static/js/scripts.js ---

--- START OF FILE: templates/400.html ---
{% extends "base.html" %}

{% block content %}
<div class="container text-center py-5">
    <h1 class="display-1">400</h1>
    <p class="lead">Bad Request</p>
    <a href="{{ url_for('index') }}" class="btn btn-primary">
        <i class="bi bi-house-door"></i> Return Home
    </a>
</div>
{% endblock %}
--- END OF FILE: templates/400.html ---

--- START OF FILE: templates/403.html ---
{% extends "base.html" %}

{% block content %}
<div class="container text-center py-5">
    <h1 class="display-1 text-warning">403</h1>
    <p class="lead">Access Forbidden</p>
    <p>You don't have permission to access this resource.</p>
    <div class="d-flex justify-content-center gap-3">
        <a href="{{ url_for('index') }}" class="btn btn-primary">
            <i class="bi bi-house-door"></i> Return Home
        </a>
        <a href="{{ url_for('logout') }}" class="btn btn-outline-danger">
            <i class="bi bi-box-arrow-right"></i> Logout
        </a>
    </div>
</div>
{% endblock %}
--- END OF FILE: templates/403.html ---

--- START OF FILE: templates/404.html ---
{% extends "base.html" %}

{% block content %}
<div class="container text-center py-5">
    <h1 class="display-1">404</h1>
    <p class="lead">Page Not Found</p>
    <a href="{{ url_for('index') }}" class="btn btn-primary">
        <i class="bi bi-house-door"></i> Return Home
    </a>
</div>
{% endblock %}
--- END OF FILE: templates/404.html ---

--- START OF FILE: templates/405.html ---
{% extends "base.html" %}

{% block content %}
<div class="container text-center py-5">
    <h1 class="display-1 text-danger">405</h1>
    <p class="lead">Method Not Allowed</p>
    <p>The requested method is not supported for this resource.</p>
    <div class="d-flex justify-content-center gap-3">
        <a href="{{ url_for('index') }}" class="btn btn-primary">
            <i class="bi bi-house-door"></i> Return Home
        </a>
        <a href="javascript:history.back()" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-left"></i> Go Back
        </a>
    </div>
</div>
{% endblock %}
--- END OF FILE: templates/405.html ---

--- START OF FILE: templates/500.html ---
{% extends "base.html" %}

{% block content %}
<div class="container text-center py-5">
    <h1 class="display-1 text-danger">500</h1>
    <p class="lead">Internal Server Error</p>
    <p>We're experiencing technical difficulties. Please try again later.</p>
    <a href="{{ url_for('index') }}" class="btn btn-primary">
        <i class="bi bi-house-door"></i> Return Home
    </a>
</div>
{% endblock %}
--- END OF FILE: templates/500.html ---

--- START OF FILE: templates/add_item.html ---
{% extends "base.html" %}

{% block title %}Add Inventory Item{% endblock %}

{% block content %}
<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="card shadow-sm border-0">
                <!-- Dark Header -->
                <div class="card-header theme-bg-dark text-white py-3">
                    <h4 class="mb-0"><i class="bi bi-plus-circle me-2"></i>Add New Inventory Item</h4>
                </div>
                
                <!-- Light Body -->
                <div class="card-body p-4 bg-white">
                    <form method="POST">
                        <input type="hidden" name="csrf_token" value="{{ csrf_token() }}">
                        <div class="mb-4">
                            <label class="form-label text-dark">Item Name*</label>
                            <input type="text" 
                                   class="form-control" 
                                   name="name" 
                                   value="{{ form_data.name if form_data }}"
                                   required>
                        </div>

                        <div class="mb-4">
                            <label class="form-label text-dark">Description</label>
                            <textarea class="form-control" 
                                      name="description" 
                                      rows="2">{{ form_data.description if form_data }}</textarea>
                        </div>

                        <div class="row g-4 mb-4">
                            <div class="col-md-4">
                                <label class="form-label text-dark">Category*</label>
                                <input type="text" 
                                       class="form-control" 
                                       name="category" 
                                       list="categories" 
                                       value="{{ form_data.category if form_data }}"
                                       required>
                                <datalist id="categories">
                                    {% for category in categories %}
                                    <option value="{{ category }}">
                                    {% endfor %}
                                </datalist>
                            </div>

                            <div class="col-md-4">
                                <label class="form-label text-dark">Condition*</label>
                                <input type="text" 
                                       class="form-control" 
                                       name="condition" 
                                       list="conditions" 
                                       value="{{ form_data.condition if form_data }}"
                                       required>
                                <datalist id="conditions">
                                    {% for condition in conditions %}
                                    <option value="{{ condition }}">
                                    {% endfor %}
                                </datalist>
                            </div>

                            <div class="col-md-4">
                                <label class="form-label text-dark">Location*</label>
                                <input type="text" 
                                       class="form-control" 
                                       name="location" 
                                       list="locations" 
                                       value="{{ form_data.location if form_data }}"
                                       required>
                                <datalist id="locations">
                                    {% for location in locations %}
                                    <option value="{{ location.name }}">
                                    {% endfor %}
                                </datalist>
                            </div>
                        </div>

                        <div class="mb-4">
                            <label class="form-label text-dark">Quantity*</label>
                            <input type="number" 
                                   class="form-control" 
                                   name="quantity" 
                                   min="1" 
                                   value="{{ form_data.quantity if form_data else '1' }}" 
                                   required>
                        </div>

                        <div class="d-flex gap-3 justify-content-end mt-4">
                            <a href="{{ url_for('index') }}" class="btn btn-outline-secondary">
                                Cancel
                            </a>
                            <button type="submit" class="btn btn-dark">
                                <i class="bi bi-save me-2"></i>Add Item
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    /* Custom styling for light theme */
    .card-body.bg-white {
        background-color: #ffffff !important;
        color: #212529;
    }

    .card-body .form-control {
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        color: #212529;
    }

    .card-body .form-control:focus {
        background-color: #ffffff;
        border-color: #303030;
        box-shadow: 0 0 0 0.25rem rgba(48, 48, 48, 0.25);
    }

    datalist {
        background-color: #ffffff;
        border: 1px solid #dee2e6;
        border-radius: 0.25rem;
    }
    
    datalist option {
        padding: 0.5rem 1rem;
        color: #212529;
    }
    
    datalist option:hover {
        background-color: #f8f9fa;
    }

    .btn-dark {
        background-color: #303030;
        border-color: #303030;
    }

    .btn-dark:hover {
        background-color: #404040;
        border-color: #404040;
    }
</style>
{% endblock %}
--- END OF FILE: templates/add_item.html ---

--- START OF FILE: templates/base.html ---
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{% block title %}Church Inventory System{% endblock %}</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
	<link rel="stylesheet" href="/static/css/style.css">
    <link rel="icon" href="{{ url_for('static', filename='favicon.ico') }}">
    {% block extra_css %}{% endblock %}
</head>

<body class="bg-light">
    <!-- Main Navigation -->
    <nav class="navbar navbar-expand-lg navbar-dark theme-bg-dark">

        <div class="container-fluid">
            <div class="d-flex align-items-center">
                <a class="navbar-brand" href="{{ url_for('index') }}">
                    <i class="bi bi-house-door nav-brand-icon"></i> Church Inventory
                </a>
                {% if current_user.is_authenticated %}
                <a href="{{ url_for('add_item') }}" class="btn btn-outline-light btn-sm ms-3 {% if active_page == 'add_item' %}active{% endif %}">
                    <i class="bi bi-plus-square me-1"></i> Add Item
                </a>
				<a href="{{ url_for('edit_items') }}" class="btn btn-outline-light btn-sm ms-3 {% if active_page == 'edit_items' %}active{% endif %}">
					<i class="bi bi-pencil-square me-1"></i> Edit Item
				</a>
				<a href="{{ url_for('delete_items') }}" class="btn btn-outline-light btn-sm ms-3 {% if active_page == 'delete_items' %}active{% endif %}">
                    <i class="bi bi-x-square me-1"></i> Delete Item
                </a>
                {% endif %}
            </div>
        
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav">
                <span class="navbar-toggler-icon"></span>
            </button>
        
            <div class="collapse navbar-collapse" id="navbarNav">
                <div class="ms-auto">
                    {% if current_user.is_authenticated %}
                    <div class="dropdown">
                        <a class="btn btn-outline-light dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown">
                            <i class="bi bi-person-circle"></i> {{ current_user.username }}
                        </a>
                        
                        <ul class="dropdown-menu dropdown-menu-end">
                            {% if current_user.is_admin %}
                            <li><a class="dropdown-item" href="{{ url_for('register') }}"><i class="bi bi-person-plus"></i> Add User</a></li>
                            {% endif %}
                            <li><a class="dropdown-item" href="{{ url_for('export_csv', type='all') }}"><i class="bi bi-boxes"></i> Export All Data</a></li>
                            <li><a class="dropdown-item" href="{{ url_for('download_template', type='all') }}">
							<i class="bi bi-file-earmark-zip"></i> Download All Templates </a></li>
                            <li><hr class="dropdown-divider"></li>
                            <li><a class="dropdown-item" href="{{ url_for('logout') }}"><i class="bi bi-box-arrow-right"></i> Logout</a></li>
                        </ul>
                    </div>
                    {% else %}
                    <a href="{{ url_for('login') }}" class="btn btn-outline-light">
                        <i class="bi bi-box-arrow-in-right"></i> Login
                    </a>
                    {% endif %}
                </div>
            </div>
        </div>
    </nav>

    <!-- Flash Messages -->
    <div class="container mt-3">
        {% with messages = get_flashed_messages(with_categories=true) %}
            {% if messages %}
                {% for category, message in messages %}
                    <div class="alert alert-{{ category }} alert-dismissible fade show">
                        {{ message }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                {% endfor %}
            {% endif %}
        {% endwith %}
    </div>

    <!-- Main Content Block -->
    <main class="container py-4">
        {% block content %}{% endblock %}
    </main>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
    {% block extra_js %}{% endblock %}
</body>
</html>
--- END OF FILE: templates/base.html ---

--- START OF FILE: templates/delete_item.html ---
{% extends "base.html" %}

{% block title %}Delete Inventory Item{% endblock %}


{% block content %}
<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-lg-8">
            <div class="card shadow-sm border-0">
                <!-- Danger Header -->
                <div class="card-header theme-bg-danger text-white py-3">
                    <h4 class="mb-0"><i class="bi bi-exclamation-triangle me-2"></i>Delete Inventory Item</h4>
                </div>
                
                <!-- Light Body -->
                <div class="card-body p-4 bg-white">
                    <div class="alert alert-danger">
                        <h5><i class="bi bi-exclamation-circle me-2"></i>Confirm Deletion</h5>
                        <p>You are about to permanently delete the following item:</p>
                        
                        <div class="border rounded p-3 mb-3">
                            <h6><strong>{{ item.name }}</strong></h6>
                            {% if item.description %}
                            <p class="mb-1">{{ item.description }}</p>
                            {% endif %}
                            <div class="row">
                                <div class="col-md-6">
                                    <small class="text-muted">Category:</small>
                                    <div>{{ item.category or 'Uncategorized' }}</div>
                                </div>
                                <div class="col-md-6">
                                    <small class="text-muted">Condition:</small>
                                    <div>{{ item.condition or 'N/A' }}</div>
                                </div>
                            </div>
                            
                            <div class="mt-2">
                                <small class="text-muted">Locations:</small>
                                <ul class="list-unstyled mb-0">
                                    {% for loc in item.locations %}
                                    <li>
                                        <i class="bi bi-geo-alt"></i> 
                                        {{ loc.location.name }} ({{ loc.quantity }})
                                    </li>
                                    {% else %}
                                    <li class="text-muted">No locations</li>
                                    {% endfor %}
                                </ul>
                            </div>
                        </div>
                        
                        <p class="mb-0"><strong>Warning:</strong> This action cannot be undone. All related movements and disposal records will also be deleted.</p>
                    </div>
                    
                    <form method="POST" action="{{ url_for('delete_item', item_id=item.id) }}">
                        <input type="hidden" name="csrf_token" value="{{ csrf_token() }}">
                        <div class="form-check mb-4">
                            <input type="checkbox" class="form-check-input" id="confirmation" name="confirmation" required>
                            <label class="form-check-label" for="confirmation">
                                I confirm that I want to permanently delete this item and all related records.
                            </label>
                        </div>
                        
                        <div class="d-flex gap-3 justify-content-end">
                            <a href="{{ url_for('delete_items') }}" class="btn btn-outline-secondary">
                                Cancel
                            </a>
                            <button type="submit" class="btn btn-danger">
                                <i class="bi bi-trash3 me-2"></i>Delete Item
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    /* Custom styling for danger theme */
    .card-body.bg-white {
        background-color: #ffffff !important;
        color: #212529;
    }

    .btn-danger {
        background-color: #dc3545;
        border-color: #dc3545;
    }

    .btn-danger:hover {
        background-color: #bb2d3b;
        border-color: #bb2d3b;
    }
</style>
{% endblock %}
--- END OF FILE: templates/delete_item.html ---

--- START OF FILE: templates/delete_items.html ---
{% extends "base.html" %}

{% block title %}Delete Items - Church Inventory System{% endblock %}


{% block content %}
<div class="container py-4">
    <div class="card shadow-sm main-content-card">
        <div class="card-header theme-bg-danger text-white fixed-header">
            <div class="row align-items-center g-3">
                <!-- Navigation Tabs - Left Side -->
                <div class="col-12 col-md-8">
                    <div class="d-flex flex-nowrap overflow-auto pb-2" style="gap: 0.5rem;">
                        <a href="{{ url_for('index') }}" class="nav-theme btn btn-outline-light flex-shrink-0">
                            <h5 class="mb-0 fs-5"><i class="bi bi-box-seam"></i> Current Inventory</h5>
                        </a>
                        <a href="{{ url_for('movements') }}" class="nav-theme btn btn-outline-light flex-shrink-0 invisible-placeholder">
                            <h5 class="mb-0 fs-5"><i class="bi bi-arrow-left-right"></i> Movement Tracker</h5>
                        </a>
                        <a href="{{ url_for('disposed_inventory') }}" class="nav-theme btn btn-outline-light flex-shrink-0 invisible-placeholder">
                            <h5 class="mb-0 fs-5"><i class="bi bi-trash3"></i> Disposed Items</h5>
                        </a>
                    </div>
                </div>

                <!-- Controls - Right Side -->
                <div class="col-12 col-md-4">
                    <div class="d-flex flex-column flex-md-row gap-2 justify-content-end">
                        <!-- CSV Controls -->
                        <div class="d-flex gap-2 flex-wrap flex-md-nowrap invisible-placeholder">
                            <button type="button" class="btn theme-control-btn" data-bs-toggle="modal" data-bs-target="#importModal">
                                <i class="bi bi-upload"></i> Import
                            </button>
                            <a href="{{ url_for('export_csv', type='inventory') }}" class="btn theme-control-btn">
                                <i class="bi bi-download"></i> Export
                            </a>
                            <a href="{{ url_for('download_template', type='inventory') }}" class="btn theme-control-btn">
                                <i class="bi bi-file-earmark-arrow-down"></i> Template
                            </a>
                        </div>

                        <!-- Search Form -->
                        <div class="search-container flex-shrink-0">
                            <form class="d-flex align-items-center" action="{{ url_for('delete_items') }}" method="GET">
                                <div class="input-group">
                                    <input type="search" 
                                           class="form-control theme-search"
                                           name="q"
                                           placeholder="Search..."
                                           value="{{ search_query if search_query }}">
                                    <button type="submit" class="btn theme-search-btn">
                                        <i class="bi bi-search"></i>
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="card-body p-0 stable-scroll-area">
            <div class="stable-table-container">
                <table class="table table-hover align-middle mb-0 table-header-lock">
                    <thead class="table-light">
                        <tr>
                            <th>Item</th>
                            <th>Category</th>
                            <th>Condition</th>
                            <th>Locations</th>
                            <th class="text-end">Total Qty</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for item in inventory %}
                        <tr>
                            <td>
                                <strong>{{ item.name }}</strong>
                                {% if item.description %}
                                <div class="text-muted small">{{ item.description }}</div>
                                {% endif %}
                            </td>
                            <td>{{ item.category or 'Uncategorized' }}</td>
                            <td>
                                <span class="badge bg-secondary">
                                    {{ item.condition or 'N/A' }}
                                </span>
                            </td>
                            <td>
                                <ul class="list-unstyled mb-0">
                                    {% for loc in item.locations if loc.quantity > 0 %}
                                    <li>
                                        <i class="bi bi-geo-alt"></i> 
                                        {{ loc.location.name }} ({{ loc.quantity }})
                                    </li>
                                    {% else %}
                                    <li class="text-muted">No stock locations</li>
                                    {% endfor %}
                                </ul>
                            </td>
                            <td class="text-end">{{ item.total_quantity }}</td>
                            <td>
                                <div class="d-flex gap-2">
                                    <a href="{{ url_for('delete_item', item_id=item.id) }}" 
                                       class="btn btn-sm btn-danger"
                                       title="Delete item">
                                        <i class="bi bi-trash3"></i>
                                    </a>
                                </div>
                            </td>
                        </tr>
                        {% else %}
                        <tr>
                            <td colspan="6" class="text-center text-muted py-4">
                                No inventory items found
                            </td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Import CSV Modal -->
    <div class="modal fade" id="importModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="bi bi-upload me-2"></i> Import CSV</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <form method="POST" action="{{ url_for('import_csv') }}" enctype="multipart/form-data">
                    <input type="hidden" name="csrf_token" value="{{ csrf_token() }}">
                    <!-- Added Hidden Context Input -->
                    <input type="hidden" name="context" value="current_inventory">
                    
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">CSV File</label>
                            <input type="file" class="form-control" name="csv_file" accept=".csv" required>
                            <small class="form-text text-muted">Use provided template format</small>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Import</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
{% endblock %}

{% block extra_js %}
<script src="{{ url_for('static', filename='js/scripts.js') }}"></script>
{% endblock %}
--- END OF FILE: templates/delete_items.html ---

--- START OF FILE: templates/disposed.html ---
{% extends "base.html" %}

{% block title %}Disposed Items - Church Inventory{% endblock %}

{% block content %}
<div class="container py-4">
    <div class="card shadow-sm main-content-card">
        <!-- Card Header with Danger Theme -->
        <div class="card-header theme-bg-danger text-white fixed-header">
            <div class="row align-items-center g-3">
                <!-- Navigation Tabs - Left Side -->
                <div class="col-12 col-md-8">
                    <div class="d-flex flex-nowrap overflow-auto pb-2" style="gap: 0.5rem;">
                        <a href="{{ url_for('index') }}" class="nav-theme btn btn-outline-light flex-shrink-0">
                            <h5 class="mb-0 fs-5"><i class="bi bi-box-seam"></i> Current Inventory</h5>
                        </a>
                        <a href="{{ url_for('movements') }}" class="nav-theme btn btn-outline-light flex-shrink-0">
                            <h5 class="mb-0 fs-5"><i class="bi bi-arrow-left-right"></i> Movement Tracker</h5>
                        </a>
                        <a href="{{ url_for('disposed_inventory') }}" class="nav-theme btn btn-outline-light active flex-shrink-0">
                            <h5 class="mb-0 fs-5"><i class="bi bi-trash3"></i> Disposed Items</h5>
                        </a>
                    </div>
                </div>

                <!-- Controls - Right Side -->
                <div class="col-12 col-md-4">
                    <div class="d-flex flex-column flex-md-row gap-2 justify-content-end">
                        <!-- CSV Controls -->
                        <div class="d-flex gap-2 flex-wrap flex-md-nowrap">
                            <button type="button" class="btn theme-control-btn" data-bs-toggle="modal" data-bs-target="#importModal">
                                <i class="bi bi-upload"></i> Import
                            </button>
                            <a href="{{ url_for('export_csv', type='disposals') }}" class="btn theme-control-btn">
								<i class="bi bi-download"></i> Export
							</a>
                            <a href="{{ url_for('download_template', type='disposals') }}" class="btn theme-control-btn">
								<i class="bi bi-file-earmark-arrow-down"></i> Template
							</a>
                        </div>

                        <!-- Search Form -->
                        <div class="search-container flex-shrink-0">
                            <form class="d-flex align-items-center" action="{{ url_for('disposed_inventory') }}" method="GET">
                                <div class="input-group">
                                    <input type="search" 
                                           class="form-control theme-search"
                                           name="q"
                                           placeholder="Search..."
                                           value="{{ search_query if search_query }}">
                                    <button type="submit" class="btn theme-search-btn">
                                        <i class="bi bi-search"></i>
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Card Body (Table) -->
        <div class="card-body p-0 stable-scroll-area">
            <div class="stable-table-container">
                <table class="table table-hover align-middle mb-0 table-header-lock">
                    <thead class="table-light">
                        <tr>
                            <th>Item</th>
                            <th>Location</th>
                            <th class="text-center">Qty</th>
                            <th>Reason</th>
                            <th>Disposed Date</th>
                            <th>Disposed By</th>
                            <th>Notes</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for disposal in disposed_items %}
                        <tr>
                            <td>
                                <strong>{{ disposal.item.name }}</strong>
                                {% if disposal.item.description %}
                                <div class="text-muted small">{{ disposal.item.description }}</div>
                                {% endif %}
                            </td>
                            <td>
                                <span class="badge bg-secondary">
                                    <i class="bi bi-geo-alt"></i> 
                                    {{ disposal.location.name }}
                                </span>
                            </td>
                            <td class="text-center">
                                <span class="badge bg-danger rounded-pill">{{ disposal.quantity }}</span>
                            </td>
                            <td>
                                <span class="badge bg-danger rounded-pill">{{ disposal.reason }}</span>
                            </td>
                            <td>{{ disposal.disposed_date|datetimeformat('%b %d, %Y') }}</td>
                            <td>{{ disposal.disposed_by }}</td>
                            <td class="small">
                                {% if disposal.notes %}
                                {{ disposal.notes }}
                                {% else %}
                                <span class="fst-italic text-muted">None</span>
                                {% endif %}
                            </td>
                        </tr>
                        {% else %}
                        <tr>
                            <td colspan="7" class="text-center text-muted py-4">
                                No disposed items found
                            </td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Import Modal (Same as index.html) -->
    <div class="modal fade" id="importModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="bi bi-upload me-2"></i> Import CSV</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <form method="POST" action="{{ url_for('import_csv') }}" enctype="multipart/form-data">
                    <input type="hidden" name="csrf_token" value="{{ csrf_token() }}">
					<input type="hidden" name="context" value="disposed_items">
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">CSV File</label>
                            <input type="file" class="form-control" name="csv_file" accept=".csv" required>
                            <small class="form-text text-muted">Use provided template format</small>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Import</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
{% endblock %}
--- END OF FILE: templates/disposed.html ---

--- START OF FILE: templates/dispose_form.html ---
{% extends "base.html" %}

{% block content %}
<div class="card shadow-sm">
    <div class="card-header theme-bg-danger text-white">
        <h5 class="mb-0"><i class="bi bi-exclamation-octagon"></i> Dispose Item: {{ item.name }}</h5>
    </div>
    
    <div class="card-body">
        <form method="POST" id="disposalForm">
            <input type="hidden" name="csrf_token" value="{{ csrf_token() }}">
            <div id="disposalEntries">
                <!-- Disposal Entry -->
                <div class="disposal-entry mb-3">
                    <div class="row g-3">
                        <div class="col-md-6">
                            <label class="form-label">Location*</label>
                            <select name="location" class="form-select theme-form-control" required>
                                <option value="">Select Location</option>
                                {% for location, available_quantity in locations_data %}
                                    <option value="{{ location.id }}" 
                                            data-max="{{ available_quantity }}"
                                            {% if form_data and form_data.location|string == location.id|string %}selected{% endif %}>
                                        {{ location.name }} (Available: {{ available_quantity }})
                                    </option>
                                {% endfor %}
                            </select>
                        </div>
                        
                        <div class="col-md-5">
                            <label class="form-label">Quantity to Dispose*</label>
                            <input type="number" name="quantity" 
                                   class="form-control theme-form-control" 
                                   min="1" 
                                   required>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Other form fields -->
            <div class="row g-3 mt-2">
                <div class="col-md-6">
                    <label class="form-label">Reason*</label>
                    <select name="reason" class="form-select theme-form-control" required>
                        <option value="damaged">Damaged</option>
                        <option value="lost">Lost</option>
                        <option value="stolen">Stolen</option>
                        <option value="donated">Donated</option>
                        <option value="other">Other</option>
                    </select>
                </div>
                
                <div class="col-md-6">
                    <label class="form-label">Date*</label>
                    <input type="date" name="date" 
                           class="form-control theme-form-control" 
                           value="{{ date_today }}" 
                           required>
                </div>
            </div>

            <div class="mb-3 mt-3">
                <label class="form-label">Notes</label>
                <textarea name="notes" class="form-control theme-form-control" rows="2"></textarea>
            </div>

            <div class="d-flex gap-2">
                <button type="submit" class="btn theme-btn-danger">
                    <i class="bi bi-check-circle"></i> Confirm Disposal
                </button>
                <a href="{{ url_for('index') }}" class="btn btn-secondary">
                    Cancel
                </a>
            </div>
        </form>
    </div>
</div>

<style>
    .theme-bg-danger {
        background-color: #6b2a2a !important;
    }
    
    .theme-btn-danger {
        background-color: #6b2a2a;
        border-color: #6b2a2a;
        color: white;
    }
    
    .theme-btn-danger:hover {
        background-color: #7a3434;
        border-color: #7a3434;
        color: white;
    }
    
    .theme-form-control:focus {
        border-color: #6b2a2a;
        box-shadow: 0 0 0 0.25rem rgba(107,42,42,0.25);
    }
    
    .form-label {
        font-weight: 500;
        color: #444;
    }
</style>

{% endblock %}

{% block extra_js %}
<script src="{{ url_for('static', filename='js/scripts.js') }}"></script>
{% endblock %}
--- END OF FILE: templates/dispose_form.html ---

--- START OF FILE: templates/edit_item.html ---
{% extends "base.html" %}

{% block title %}Edit Inventory Item{% endblock %}

{% block content %}
<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-lg-10">
            <div class="card shadow-sm border-0">
                <!-- Primary Header -->
                <div class="card-header theme-bg-primary text-white py-3">
                    <h4 class="mb-0"><i class="bi bi-pencil-square me-2"></i>Edit Inventory Item</h4>
                </div>
                
                <!-- Light Body -->
                <div class="card-body p-4 bg-white">
                    <form method="POST" action="{{ url_for('edit_item', item_id=item.id) }}">
                        <input type="hidden" name="csrf_token" value="{{ csrf_token() }}">
                        <div class="mb-4">
                            <label class="form-label text-dark">Item Name*</label>
                            <input type="text" 
                                   class="form-control" 
                                   name="name" 
                                   value="{{ item.name }}"
                                   required>
                        </div>

                        <div class="mb-4">
                            <label class="form-label text-dark">Description</label>
                            <textarea class="form-control" 
                                      name="description" 
                                      rows="2">{{ item.description }}</textarea>
                        </div>

                        <div class="row g-4 mb-4">
                            <div class="col-md-4">
                                <label class="form-label text-dark">Category*</label>
                                <input type="text" 
                                       class="form-control" 
                                       name="category" 
                                       list="categories" 
                                       value="{{ item.category }}"
                                       required>
                                <datalist id="categories">
                                    {% for category in categories %}
                                    <option value="{{ category }}">
                                    {% endfor %}
                                </datalist>
                            </div>

                            <div class="col-md-4">
                                <label class="form-label text-dark">Condition*</label>
                                <input type="text" 
                                       class="form-control" 
                                       name="condition" 
                                       list="conditions" 
                                       value="{{ item.condition }}"
                                       required>
                                <datalist id="conditions">
                                    {% for condition in conditions %}
                                    <option value="{{ condition }}">
                                    {% endfor %}
                                </datalist>
                            </div>
                            
                        </div>

                        <fieldset class="border p-3 mb-4">
                            <legend class="float-none w-auto px-2 h6">Stock & Locations</legend>
                            <p class="text-muted small">Update quantities for existing locations below. To remove an item from a location, set its quantity to 0.</p>

                            {% for loc in item.locations %}
                            <div class="row g-3 align-items-center mb-2">
                                <div class="col-sm-6">
                                    <label class="form-label visually-hidden">Location</label>
                                    <input type="text"
                                        class="form-control"
                                        name="location_name"
                                        value="{{ loc.location.name }}"
                                        list="all_locations"
                                        required>
                                </div>
                                <div class="col-sm-6">
                                    <label class="form-label visually-hidden">Quantity</label>
                                    <input type="hidden" name="item_location_id" value="{{ loc.id }}">
                                    <div class="input-group">
                                        <span class="input-group-text">Quantity</span>
                                        <input type="number"
                                            class="form-control"
                                            name="quantity"
                                            min="0"
                                            value="{{ loc.quantity }}"
                                            required>
                                    </div>
                                </div>
                            </div>
                            {% else %}
                            <p class="text-center text-muted">This item is not currently in any location.</p>
                            {% endfor %}
                        </fieldset>

                        <fieldset class="border p-3 mb-4">
                            <legend class="float-none w-auto px-2 h6">Add to a New Location</legend>
                            <div class="row g-3">
                                <div class="col-md-6">
                                    <label class="form-label">New Location Name</label>
                                    <input type="text"
                                        class="form-control"
                                        name="new_location"
                                        list="all_locations">
                                    <datalist id="all_locations">
                                        {% for location in locations %}
                                            <option value="{{ location.name }}">
                                        {% endfor %}
                                    </datalist>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label">Quantity</label>
                                    <input type="number"
                                        class="form-control"
                                        name="new_quantity"
                                        min="1"
                                        placeholder="Leave blank if not adding">
                                </div>
                            </div>
                        </fieldset>

                        <div class="d-flex gap-3 justify-content-end mt-4">
                            <a href="{{ url_for('index') }}" class="btn btn-outline-secondary">
                                Cancel
                            </a>
                            <button type="submit" class="btn btn-primary">
                                <i class="bi bi-save me-2"></i>Save Changes
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    /* Custom styling for primary theme */
    .card-body.bg-white {
        background-color: #ffffff !important;
        color: #212529;
    }

    .card-body .form-control {
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        color: #212529;
    }

    .card-body .form-control:focus {
        background-color: #ffffff;
        border-color: #2c3e50;
        box-shadow: 0 0 0 0.25rem rgba(44, 62, 80, 0.25);
    }

    datalist {
        background-color: #ffffff;
        border: 1px solid #dee2e6;
        border-radius: 0.25rem;
    }
    
    datalist option {
        padding: 0.5rem 1rem;
        color: #212529;
    }
    
    datalist option:hover {
        background-color: #f8f9fa;
    }

    .btn-primary {
        background-color: #2c3e50;
        border-color: #2c3e50;
    }

    .btn-primary:hover {
        background-color: #34495e;
        border-color: #34495e;
    }
</style>
{% endblock %}
--- END OF FILE: templates/edit_item.html ---

--- START OF FILE: templates/edit_items.html ---
{% extends "base.html" %}
{% block title %}Edit Items - Church Inventory System{% endblock %}


{% block content %}
<div class="container py-4">
    <div class="card shadow-sm main-content-card">
        <div class="card-header theme-bg-primary text-white fixed-header">
            <div class="row align-items-center g-3">
                <div class="col-12 col-md-8">
                    <div class="d-flex flex-nowrap overflow-auto pb-2" style="gap: 0.5rem;">
                        <a href="{{ url_for('index') }}" class="nav-theme btn btn-outline-light flex-shrink-0">
                            <h5 class="mb-0 fs-5"><i class="bi bi-box-seam"></i> Current Inventory</h5>
                        </a>
                        <a href="{{ url_for('movements') }}" class="nav-theme btn btn-outline-light flex-shrink-0 invisible-placeholder">
                            <h5 class="mb-0 fs-5"><i class="bi bi-arrow-left-right"></i> Movement Tracker</h5>
                        </a>
                        <a href="{{ url_for('disposed_inventory') }}" class="nav-theme btn btn-outline-light flex-shrink-0 invisible-placeholder">
                            <h5 class="mb-0 fs-5"><i class="bi bi-trash3"></i> Disposed Items</h5>
                        </a>
                    </div>
                </div>

                <div class="col-12 col-md-4">
                    <div class="d-flex flex-column flex-md-row gap-2 justify-content-end">
                        <div class="d-flex gap-2 flex-wrap flex-md-nowrap invisible-placeholder">
                            <button type="button" class="btn theme-control-btn" data-bs-toggle="modal" data-bs-target="#importModal">
                                <i class="bi bi-upload"></i> Import
                            </button>
                            <a href="{{ url_for('export_csv', type='inventory') }}" class="btn theme-control-btn">
                                <i class="bi bi-download"></i> Export
                            </a>
                            <a href="{{ url_for('download_template', type='inventory') }}" class="btn theme-control-btn">
                                <i class="bi bi-file-earmark-arrow-down"></i> Template
                            </a>
                        </div>

                        <div class="search-container flex-shrink-0">
                            <form class="d-flex align-items-center" action="{{ url_for('search') }}" method="GET">
                                <div class="input-group">
                                    <input type="search"
                                           class="form-control theme-search"
                                           name="q"
                                           placeholder="Search..."
                                           value="{{ search_query if search_query }}">
                                    <button type="submit" class="btn theme-search-btn">
                                        <i class="bi bi-search"></i>
                                    </button>
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="card-body p-0 stable-scroll-area">
            <div class="stable-table-container">
                <table class="table table-hover align-middle mb-0 table-header-lock">
                    <thead class="table-light">
                        <tr>
                            <th>Item</th>
                            <th>Category</th>
                            <th>Condition</th>
                            <th>Locations</th>
                            <th class="text-end">Total Qty</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for item in inventory %}
                        <tr>
                            <td>
                                <strong>{{ item.name }}</strong>
                                {% if item.description %}
                                <div class="text-muted small">{{ item.description }}</div>
                                {% endif %}
                            </td>
                            <td>{{ item.category or 'Uncategorized' }}</td>
                            <td>
                                <span class="badge bg-secondary">
                                    {{ item.condition or 'N/A' }}
                                </span>
                            </td>
                            <td>
                                <ul class="list-unstyled mb-0">
                                    {% for loc in item.locations if loc.quantity > 0 %}
                                    <li>
                                        <i class="bi bi-geo-alt"></i>
                                        {{ loc.location.name }} ({{ loc.quantity }})
                                    </li>
                                    {% else %}
                                    <li class="text-muted">No stock locations</li>
                                    {% endfor %}
                                </ul>
                            </td>
                            <td class="text-end">{{ item.total_quantity }}</td>
                            <td>
                                <div class="d-flex gap-2">
                                    <a href="{{ url_for('edit_item', item_id=item.id) }}"
                                       class="btn btn-sm btn-primary"
                                       title="Edit item">
                                        <i class="bi bi-pencil"></i>
                                    </a>
                                </div>
                            </td>
                        </tr>
                        {% else %}
                        <tr>
                            <td colspan="6" class="text-center text-muted py-4">
                                No inventory items found
                            </td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>

	<div class="modal fade" id="importModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="bi bi-upload me-2"></i> Import CSV</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <form method="POST" action="{{ url_for('import_csv') }}" enctype="multipart/form-data">
                    <input type="hidden" name="csrf_token" value="{{ csrf_token() }}">
                    <input type="hidden" name="context" value="current_inventory">
                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">CSV File</label>
                            <input type="file" class="form-control" name="csv_file" accept=".csv" required>
                            <small class="form-text text-muted">Use provided template format</small>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Import</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
{% endblock %}
--- END OF FILE: templates/edit_items.html ---

--- START OF FILE: templates/index.html ---
{% extends "base.html" %}

{% block content %}
<div class="container py-4">
    <div class="card shadow-sm main-content-card">
        <div class="card-header theme-bg-success text-white fixed-header">
    <div class="row align-items-center g-3">
        <!-- Navigation Tabs - Left Side -->
        <div class="col-12 col-md-8">
            <div class="d-flex flex-nowrap overflow-auto pb-2" style="gap: 0.5rem;">
                <a href="{{ url_for('index') }}" class="nav-theme btn btn-outline-light active flex-shrink-0">
                    <h5 class="mb-0 fs-5"><i class="bi bi-box-seam"></i> Current Inventory</h5>
                </a>
                <a href="{{ url_for('movements') }}" class="nav-theme btn btn-outline-light flex-shrink-0">
                    <h5 class="mb-0 fs-5"><i class="bi bi-arrow-left-right"></i> Movement Tracker</h5>
                </a>
                <a href="{{ url_for('disposed_inventory') }}" class="nav-theme btn btn-outline-light flex-shrink-0">
                    <h5 class="mb-0 fs-5"><i class="bi bi-trash3"></i> Disposed Items</h5>
                </a>
            </div>
        </div>

        <!-- Controls - Right Side -->
        <div class="col-12 col-md-4">
            <div class="d-flex flex-column flex-md-row gap-2 justify-content-end">
                <!-- CSV Controls -->
                <div class="d-flex gap-2 flex-wrap flex-md-nowrap">
                    <button type="button" class="btn theme-control-btn" data-bs-toggle="modal" data-bs-target="#importModal">
                        <i class="bi bi-upload"></i> Import
                    </button>
                    <a href="{{ url_for('export_csv', type='inventory') }}" class="btn theme-control-btn">
						<i class="bi bi-download"></i> Export
					</a>
                    <a href="{{ url_for('download_template', type='inventory') }}" class="btn theme-control-btn">
						<i class="bi bi-file-earmark-arrow-down"></i> Template
					</a>
                </div>

                <!-- Search Form -->
                <div class="search-container flex-shrink-0">
                    <form class="d-flex align-items-center" action="{{ url_for('search') }}" method="GET">
                        <div class="input-group">
                            <input type="search" 
                                   class="form-control theme-search"
                                   name="q"
                                   placeholder="Search..."
                                   value="{{ search_query if search_query }}">
                            <button type="submit" class="btn theme-search-btn">
                                <i class="bi bi-search"></i>
                            </button>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

        <div class="card-body p-0 stable-scroll-area">
            <div class="stable-table-container">
                <table class="table table-hover align-middle mb-0 table-header-lock">
                    <thead class="table-light">
                        <tr>
                            <th>Item</th>
                            <th>Category</th>
                            <th>Condition</th>
                            <th>Locations</th>
                            <th class="text-end">Total Qty</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for item in inventory %}
                        <tr>
                            <td>
                                <strong>{{ item.name }}</strong>
                                {% if item.description %}
                                <div class="text-muted small">{{ item.description }}</div>
                                {% endif %}
                            </td>
                            <td>{{ item.category or 'Uncategorized' }}</td>
                            <td>
                                <span class="badge bg-secondary">
                                    {{ item.condition or 'N/A' }}
                                </span>
                            </td>
                            <td>
								<ul class="list-unstyled mb-0">
									{% for loc in item.locations if loc.quantity > 0 %}  <!-- Added quantity check -->
									<li>
										<i class="bi bi-geo-alt"></i> 
										{{ loc.location.name }} ({{ loc.quantity }})
									</li>
									{% else %}
									<li class="text-muted">No stock locations</li>
									{% endfor %}
								</ul>
							</td>
                            <td class="text-end">{{ item.total_quantity }}</td>
                            <td>
                                <div class="d-flex gap-2">
                                    <a href="{{ url_for('transfer', item_id=item.id) }}" 
                                       class="btn btn-sm btn-outline-primary"
                                       title="Transfer item">
                                        <i class="bi bi-arrow-left-right"></i>
                                    </a>
                                    <a href="{{ url_for('dispose_item', item_id=item.id) }}" 
                                       class="btn btn-sm btn-outline-danger"
                                       title="Dispose item">
                                        <i class="bi bi-trash3"></i>
                                    </a>
                                </div>
                            </td>
                        </tr>
                        {% else %}
                        <tr>
                            <td colspan="6" class="text-center text-muted py-4">
                                No inventory items found
                            </td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Import CSV Modal -->
	<div class="modal fade" id="importModal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title"><i class="bi bi-upload me-2"></i> Import CSV</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <form method="POST" action="{{ url_for('import_csv') }}" enctype="multipart/form-data">
                <input type="hidden" name="csrf_token" value="{{ csrf_token() }}">
                <!-- Added Hidden Context Input -->
                <input type="hidden" name="context" value="current_inventory">
                
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">CSV File</label>
                        <input type="file" class="form-control" name="csv_file" accept=".csv" required>
                        <small class="form-text text-muted">Use provided template format</small>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                    <button type="submit" class="btn btn-primary">Import</button>
                </div>
            </form>
        </div>
    </div>
	</div>
</div>
{% endblock %}

{% block extra_js %}
<script src="{{ url_for('static', filename='js/scripts.js') }}"></script>
{% endblock %}
--- END OF FILE: templates/index.html ---

--- START OF FILE: templates/login.html ---
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Church Inventory System - Login</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <link rel="stylesheet" href="/static/css/style.css">
	<link rel="icon" href="{{ url_for('static', filename='favicon.ico') }}">
    
</head>
<body class="bg-light">
    <!-- Main Navigation -->
    <nav class="navbar navbar-dark bg-dark">
        <div class="container-fluid">
            <a class="navbar-brand" href="{{ url_for('index') }}">
                <i class="bi bi-house-door"></i> Church Inventory
            </a>
        </div>
    </nav>

    <!-- Login Content -->
    <div class="container py-5">
        <div class="login-container">
            <!-- Flash Messages -->
            {% with messages = get_flashed_messages(with_categories=true) %}
                {% if messages %}
                    {% for category, message in messages %}
                    <div class="alert alert-{{ category }} alert-dismissible fade show">
                        {{ message }}
                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                    </div>
                    {% endfor %}
                {% endif %}
            {% endwith %}

            <!-- Login Card -->
            <div class="auth-card card p-4">
                <h2 class="mb-4 text-center">
                    <i class="bi bi-box-arrow-in-right"></i> Login
                </h2>
                
                <form method="POST" action="{{ url_for('login') }}">
                    <input type="hidden" name="csrf_token" value="{{ csrf_token() }}">
                    <input type="hidden" name="next" value="{{ request.args.get('next', '') }}">
                    
                    <!-- Username Input -->
                    <div class="mb-3">
                        <label class="form-label">Username</label>
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="bi bi-person-fill form-icon"></i>
                            </span>
                            <input type="text" 
                                   name="username" 
                                   class="form-control" 
                                   required
                                   value="{{ request.form.username if request.form }}">
                        </div>
                    </div>
                    
                    <!-- Password Input -->
                    <div class="mb-4">
                        <label class="form-label">Password</label>
                        <div class="input-group">
                            <span class="input-group-text">
                                <i class="bi bi-lock-fill form-icon"></i>
                            </span>
                            <input type="password" 
                                   name="password" 
                                   class="form-control" 
                                   required>
                        </div>
                    </div>
                    
                    <!-- Remember Me Checkbox -->
                    <div class="mb-3 form-check">
                        <input type="checkbox" 
                               class="form-check-input" 
                               id="remember" 
                               name="remember">
                        <label class="form-check-label" for="remember">
                            Remember me
                        </label>
                    </div>
                    
                    <!-- Submit Button -->
                    <div class="d-grid gap-2">
                        <button type="submit" 
                                class="btn btn-primary btn-lg">
                            <i class="bi bi-box-arrow-in-right me-2"></i> Sign In
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>
</body>
</html>
--- END OF FILE: templates/login.html ---

--- START OF FILE: templates/movements.html ---
{% extends "base.html" %}

{% block title %}Movement Tracker - Church Inventory{% endblock %}

{% block content %}
<div class="container py-4">
    <div class="card shadow-sm main-content-card"> 
        <!-- Card Header with Primary Theme -->
        <div class="card-header theme-bg-primary text-white fixed-header">
            <div class="row align-items-center g-3">
                <!-- Navigation Tabs - Left Side -->
                <div class="col-12 col-md-8">
                    <div class="d-flex flex-nowrap overflow-auto pb-2" style="gap: 0.5rem;">
                        <a href="{{ url_for('index') }}" class="nav-theme btn btn-outline-light flex-shrink-0">
                            <h5 class="mb-0 fs-5"><i class="bi bi-box-seam"></i> Current Inventory</h5>
                        </a>
                        <a href="{{ url_for('movements') }}" class="nav-theme btn btn-outline-light active flex-shrink-0">
                            <h5 class="mb-0 fs-5"><i class="bi bi-arrow-left-right"></i> Movement Tracker</h5>
                        </a>
                        <a href="{{ url_for('disposed_inventory') }}" class="nav-theme btn btn-outline-light flex-shrink-0">
                            <h5 class="mb-0 fs-5"><i class="bi bi-trash3"></i> Disposed Items</h5>
                        </a>
                    </div>
                </div>

                <!-- Controls - Right Side -->
                <div class="col-12 col-md-4">
                    <div class="d-flex flex-column flex-md-row gap-2 justify-content-end">
                        <!-- CSV Controls -->
                        <div class="d-flex gap-2 flex-wrap flex-md-nowrap">
                            <button type="button" class="btn theme-control-btn" data-bs-toggle="modal" data-bs-target="#importModal">
                                <i class="bi bi-upload"></i> Import
                            </button>
                            <a href="{{ url_for('export_csv', type='movements') }}" class="btn theme-control-btn">
								<i class="bi bi-download"></i> Export
							</a>
                            <a href="{{ url_for('download_template', type='movements') }}" class="btn theme-control-btn">
								<i class="bi bi-file-earmark-arrow-down"></i> Template
							</a>
                        </div>

                        <!-- Search Form -->
                        <div class="search-container flex-shrink-0">
            <form class="d-flex align-items-center" action="{{ url_for('movements') }}" method="GET">
                <div class="input-group">
                    <input type="search" 
                           class="form-control theme-search"
                           name="q"
                           placeholder="Search movements..."
                           value="{{ search_query }}">
                    <button type="submit" class="btn theme-search-btn">
                        <i class="bi bi-search"></i>
                    </button>
                </div>
            </form>
        </div>

                    </div>
                </div>
            </div>
        </div>

        <!-- Card Body (Table) -->
        <div class="card-body p-0 stable-scroll-area">
            <div class="stable-table-container">
                <table class="table table-hover align-middle mb-0 table-header-lock">
                    <thead class="table-light">
                        <tr>
                            <th>Item</th>
                            <th class="text-center">Qty</th>
                            <th>From</th>
                            <th>To</th>
                            <th>Date</th>
                            <th>Responsible</th>
                        </tr>
                    </thead>
                    <tbody>
                        {% for movement in movements %}
                        <tr>
                            <td>
                                <strong>{{ movement.item.name }}</strong>
                                {% if movement.item.description %}
                                <div class="text-muted small">{{ movement.item.description }}</div>
                                {% endif %}
                            </td>
                            <td class="text-center">
                                <span class="badge bg-primary rounded-pill">{{ movement.quantity }}</span>
                            </td>
                            <td>
                                {% if movement.from_location %}
                                <span class="badge bg-secondary">
                                    <i class="bi bi-geo-alt"></i> 
                                    {{ movement.from_location.name }}
                                </span>
                                {% else %}
                                <span class="badge bg-warning text-dark">N/A</span>
                                {% endif %}
                            </td>
                            <td>
                                {% if movement.to_location %}
                                <span class="badge bg-primary">
                                    <i class="bi bi-geo-alt"></i> 
                                    {{ movement.to_location.name }}
                                </span>
                                {% else %}
                                <span class="badge bg-warning text-dark">N/A</span>
                                {% endif %}
                            </td>
                            <td>{{ movement.movement_date|datetimeformat('%b %d, %Y %H:%M') }}</td>
                            <td>{{ movement.responsible_person }}</td>
                        </tr>
                        {% else %}
                        <tr>
                            <td colspan="6" class="text-center text-muted py-4">
                                No movement records found
                            </td>
                        </tr>
                        {% endfor %}
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Import Modal -->
    <div class="modal fade" id="importModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title"><i class="bi bi-upload me-2"></i> Import Movements</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <form method="POST" action="{{ url_for('import_csv') }}" enctype="multipart/form-data">
                    <input type="hidden" name="csrf_token" value="{{ csrf_token() }}">
				
					<input type="hidden" name="context" value="movement_tracker">

                    <div class="modal-body">
                        <div class="mb-3">
                            <label class="form-label">CSV File</label>
                            <input type="file" class="form-control" name="csv_file" accept=".csv" required>
                            <small class="form-text text-muted">Use provided template format</small>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Import</button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>
{% endblock %}
--- END OF FILE: templates/movements.html ---

--- START OF FILE: templates/register.html ---
{% extends "base.html" %}

{% block title %}Register User{% endblock %}

{% block content %}
<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-md-8 col-lg-6">
            <div class="card shadow-sm border-0">
                <div class="card-header theme-bg-dark text-white py-3">
                    <h4 class="mb-0"><i class="bi bi-person-plus me-2"></i>Register New User</h4>
                </div>
                <div class="card-body p-4">
                    <form method="POST" action="{{ url_for('register') }}">
                        <input type="hidden" name="csrf_token" value="{{ csrf_token() }}">
                        <!-- Flash Messages -->
                        {% with messages = get_flashed_messages(with_categories=true) %}
                            {% if messages %}
                                {% for category, message in messages %}
                                    <div class="alert alert-{{ category }} alert-dismissible fade show mb-4">
                                        {{ message }}
                                        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
                                    </div>
                                {% endfor %}
                            {% endif %}
                        {% endwith %}

                        <!-- Username Input -->
                        <div class="mb-4">
                            <label for="username" class="form-label">Username</label>
                            <input type="text" 
                                   class="form-control" 
                                   id="username" 
                                   name="username"
                                   value="{{ form_data.username if form_data }}"
                                   required>
                        </div>

                        <!-- Password Input -->
                        <div class="mb-4">
                            <label for="password" class="form-label">Password</label>
                            <input type="password" 
                                   class="form-control" 
                                   id="password" 
                                   name="password" 
                                   required>
                        </div>

                        <!-- Confirm Password -->
                        <div class="mb-4">
                            <label for="confirm_password" class="form-label">Confirm Password</label>
                            <input type="password" 
                                   class="form-control" 
                                   id="confirm_password" 
                                   name="confirm_password" 
                                   required>
                        </div>

                        <!-- Admin Checkbox -->
                        <div class="mb-4 form-check">
                            <input type="checkbox" 
                                   class="form-check-input" 
                                   id="is_admin" 
                                   name="is_admin"
                                   {% if form_data and form_data.is_admin %}checked{% endif %}>
                            <label class="form-check-label" for="is_admin">Admin Privileges</label>
                        </div>

                        <!-- Submit Button -->
                        <div class="d-grid gap-2">
                            <button type="submit" class="btn btn-dark" style="background-color: #303030;">
                                Register User
                            </button>
                            <a href="{{ url_for('index') }}" class="btn btn-outline-secondary">
                                Cancel
                            </a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    .theme-bg-dark {
        background-color: #303030 !important;
    }
    
    .card {
        border-radius: 0.5rem;
    }
    
    .form-check-input:checked {
        background-color: #303030;
        border-color: #303030;
    }
    
    .btn-dark:hover {
        background-color: #404040 !important;
        border-color: #404040;
    }
</style>
{% endblock %}
--- END OF FILE: templates/register.html ---

--- START OF FILE: templates/transfer.html ---
{% extends "base.html" %}

{% block content %}
<div class="container py-4">
    <div class="card shadow-sm">
        <div class="card-header theme-bg-primary text-white">
            <h5 class="mb-0"><i class="bi bi-arrow-left-right"></i> Transfer Inventory</h5>
        </div>

        <div class="card-body">
            <form method="POST">
                <input type="hidden" name="csrf_token" value="{{ csrf_token() }}">
                <div class="row g-3">
                    <!-- Item Selection -->
                    <div class="col-md-6">
                        <label class="form-label">Select Item</label>
                        <select class="form-select" name="item_id" required>
                            <option value="">Choose item...</option>
                            {% for item in items %}
                            <option value="{{ item.id }}" {% if selected_item and item.id == selected_item.id %}selected{% endif %}>
                                {{ item.name }} (Total: {{ item.total_quantity }})
                            </option>
                            {% endfor %}
                        </select>
                    </div>

                    <!-- Source Location -->
                    <div class="col-md-6">
                        <label class="form-label">From Location</label>
                        <select class="form-select" name="from_location" required>
                            <option value="">Select source...</option>
                            {% if selected_item %}
                                {% for location, qty in available_locations %}
                                <option value="{{ location.id }}">
                                    {{ location.name }} (Available: {{ qty }})
                                </option>
                                {% endfor %}
                            {% endif %}
                        </select>
                    </div>

                    <!-- Destination Location -->
					<div class="col-md-6">
						<label class="form-label">To Location</label>
						<select class="form-select" name="to_location" required>
							<option value="">Select destination...</option>
							{% for location in all_locations %}
								{% if selected_item %}
									{# Only exclude the currently selected FROM location #}
									{% if location.id != request.form.get('from_location', 0)|int %}
										<option value="{{ location.id }}">{{ location.name }}</option>
									{% endif %}
								{% else %}
									<option value="{{ location.id }}">{{ location.name }}</option>
								{% endif %}
							{% endfor %}
						</select>
					</div>

                    <!-- Quantity Input -->
                    <div class="col-md-6">
                        <label class="form-label">Quantity</label>
                        <input type="number" 
                               class="form-control" 
                               name="quantity" 
                               min="1" 
                               required>
                    </div>

                    <!-- Responsible Person -->
                    <div class="col-12">
                        <label class="form-label">Responsible Person</label>
                        <input type="text" 
                               class="form-control" 
                               name="responsible" 
                               value="{{ current_user.username }}"
                               required>
                    </div>

                    <!-- Submit Button -->
                    <div class="col-12">
                        <button type="submit" class="btn btn-primary w-100">
                            <i class="bi bi-check2-circle"></i> Confirm Transfer
                        </button>
                    </div>
                </div>
            </form>
        </div>
    </div>
</div>
{% endblock %}
--- END OF FILE: templates/transfer.html ---

